// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapPoint.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MapPoint_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_MapPoint_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Keyframe.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_MapPoint_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MapPoint_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MapPoint_2eproto;
namespace orbslam2 {
class MapPointData;
class MapPointDataDefaultTypeInternal;
extern MapPointDataDefaultTypeInternal _MapPointData_default_instance_;
class MapPointList;
class MapPointListDefaultTypeInternal;
extern MapPointListDefaultTypeInternal _MapPointList_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> ::orbslam2::MapPointData* Arena::CreateMaybeMessage<::orbslam2::MapPointData>(Arena*);
template<> ::orbslam2::MapPointList* Arena::CreateMaybeMessage<::orbslam2::MapPointList>(Arena*);
template<> ::orbslam2::Vector3* Arena::CreateMaybeMessage<::orbslam2::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orbslam2 {

// ===================================================================

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {};
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MapPoint_2eproto);
    return ::descriptor_table_MapPoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MapPoint_2eproto;
};
// -------------------------------------------------------------------

class MapPointData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.MapPointData) */ {
 public:
  inline MapPointData() : MapPointData(nullptr) {};
  virtual ~MapPointData();

  MapPointData(const MapPointData& from);
  MapPointData(MapPointData&& from) noexcept
    : MapPointData() {
    *this = ::std::move(from);
  }

  inline MapPointData& operator=(const MapPointData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPointData& operator=(MapPointData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPointData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPointData* internal_default_instance() {
    return reinterpret_cast<const MapPointData*>(
               &_MapPointData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MapPointData& a, MapPointData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPointData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPointData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapPointData* New() const final {
    return CreateMaybeMessage<MapPointData>(nullptr);
  }

  MapPointData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPointData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPointData& from);
  void MergeFrom(const MapPointData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPointData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.MapPointData";
  }
  protected:
  explicit MapPointData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MapPoint_2eproto);
    return ::descriptor_table_MapPoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 8,
    kViewDirectionFieldNumber = 9,
    kDescFieldNumber = 10,
    kIdFieldNumber = 1,
    kMaxDistanceFieldNumber = 2,
    kMinDistanceFieldNumber = 3,
    kRefKfIdFieldNumber = 4,
    kRefFeatIdFieldNumber = 5,
    kMatchesInTrackFieldNumber = 6,
    kInliersInTrackFieldNumber = 7,
  };
  // .orbslam2.Vector3 position = 8;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::orbslam2::Vector3& position() const;
  ::orbslam2::Vector3* release_position();
  ::orbslam2::Vector3* mutable_position();
  void set_allocated_position(::orbslam2::Vector3* position);
  private:
  const ::orbslam2::Vector3& _internal_position() const;
  ::orbslam2::Vector3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::orbslam2::Vector3* position);
  ::orbslam2::Vector3* unsafe_arena_release_position();

  // .orbslam2.Vector3 view_direction = 9;
  bool has_view_direction() const;
  private:
  bool _internal_has_view_direction() const;
  public:
  void clear_view_direction();
  const ::orbslam2::Vector3& view_direction() const;
  ::orbslam2::Vector3* release_view_direction();
  ::orbslam2::Vector3* mutable_view_direction();
  void set_allocated_view_direction(::orbslam2::Vector3* view_direction);
  private:
  const ::orbslam2::Vector3& _internal_view_direction() const;
  ::orbslam2::Vector3* _internal_mutable_view_direction();
  public:
  void unsafe_arena_set_allocated_view_direction(
      ::orbslam2::Vector3* view_direction);
  ::orbslam2::Vector3* unsafe_arena_release_view_direction();

  // .orbslam2.Descriptor desc = 10;
  bool has_desc() const;
  private:
  bool _internal_has_desc() const;
  public:
  void clear_desc();
  const ::orbslam2::Descriptor& desc() const;
  ::orbslam2::Descriptor* release_desc();
  ::orbslam2::Descriptor* mutable_desc();
  void set_allocated_desc(::orbslam2::Descriptor* desc);
  private:
  const ::orbslam2::Descriptor& _internal_desc() const;
  ::orbslam2::Descriptor* _internal_mutable_desc();
  public:
  void unsafe_arena_set_allocated_desc(
      ::orbslam2::Descriptor* desc);
  ::orbslam2::Descriptor* unsafe_arena_release_desc();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float max_distance = 2;
  void clear_max_distance();
  float max_distance() const;
  void set_max_distance(float value);
  private:
  float _internal_max_distance() const;
  void _internal_set_max_distance(float value);
  public:

  // float min_distance = 3;
  void clear_min_distance();
  float min_distance() const;
  void set_min_distance(float value);
  private:
  float _internal_min_distance() const;
  void _internal_set_min_distance(float value);
  public:

  // uint64 ref_kf_id = 4;
  void clear_ref_kf_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_kf_id() const;
  void set_ref_kf_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ref_kf_id() const;
  void _internal_set_ref_kf_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 ref_feat_id = 5;
  void clear_ref_feat_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_feat_id() const;
  void set_ref_feat_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ref_feat_id() const;
  void _internal_set_ref_feat_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 matches_in_track = 6;
  void clear_matches_in_track();
  ::PROTOBUF_NAMESPACE_ID::int32 matches_in_track() const;
  void set_matches_in_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_matches_in_track() const;
  void _internal_set_matches_in_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 inliers_in_track = 7;
  void clear_inliers_in_track();
  ::PROTOBUF_NAMESPACE_ID::int32 inliers_in_track() const;
  void set_inliers_in_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_inliers_in_track() const;
  void _internal_set_inliers_in_track(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.MapPointData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::orbslam2::Vector3* position_;
  ::orbslam2::Vector3* view_direction_;
  ::orbslam2::Descriptor* desc_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  float max_distance_;
  float min_distance_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_kf_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ref_feat_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 matches_in_track_;
  ::PROTOBUF_NAMESPACE_ID::int32 inliers_in_track_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MapPoint_2eproto;
};
// -------------------------------------------------------------------

class MapPointList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.MapPointList) */ {
 public:
  inline MapPointList() : MapPointList(nullptr) {};
  virtual ~MapPointList();

  MapPointList(const MapPointList& from);
  MapPointList(MapPointList&& from) noexcept
    : MapPointList() {
    *this = ::std::move(from);
  }

  inline MapPointList& operator=(const MapPointList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapPointList& operator=(MapPointList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapPointList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapPointList* internal_default_instance() {
    return reinterpret_cast<const MapPointList*>(
               &_MapPointList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MapPointList& a, MapPointList& b) {
    a.Swap(&b);
  }
  inline void Swap(MapPointList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapPointList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapPointList* New() const final {
    return CreateMaybeMessage<MapPointList>(nullptr);
  }

  MapPointList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapPointList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapPointList& from);
  void MergeFrom(const MapPointList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapPointList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.MapPointList";
  }
  protected:
  explicit MapPointList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_MapPoint_2eproto);
    return ::descriptor_table_MapPoint_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMappointsFieldNumber = 1,
  };
  // repeated .orbslam2.MapPointData mappoints = 1;
  int mappoints_size() const;
  private:
  int _internal_mappoints_size() const;
  public:
  void clear_mappoints();
  ::orbslam2::MapPointData* mutable_mappoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::MapPointData >*
      mutable_mappoints();
  private:
  const ::orbslam2::MapPointData& _internal_mappoints(int index) const;
  ::orbslam2::MapPointData* _internal_add_mappoints();
  public:
  const ::orbslam2::MapPointData& mappoints(int index) const;
  ::orbslam2::MapPointData* add_mappoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::MapPointData >&
      mappoints() const;

  // @@protoc_insertion_point(class_scope:orbslam2.MapPointList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::MapPointData > mappoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_MapPoint_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:orbslam2.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:orbslam2.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:orbslam2.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:orbslam2.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:orbslam2.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:orbslam2.Vector3.z)
}

// -------------------------------------------------------------------

// MapPointData

// uint64 id = 1;
inline void MapPointData::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::id() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.id)
  return _internal_id();
}
inline void MapPointData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void MapPointData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.id)
}

// float max_distance = 2;
inline void MapPointData::clear_max_distance() {
  max_distance_ = 0;
}
inline float MapPointData::_internal_max_distance() const {
  return max_distance_;
}
inline float MapPointData::max_distance() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.max_distance)
  return _internal_max_distance();
}
inline void MapPointData::_internal_set_max_distance(float value) {
  
  max_distance_ = value;
}
inline void MapPointData::set_max_distance(float value) {
  _internal_set_max_distance(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.max_distance)
}

// float min_distance = 3;
inline void MapPointData::clear_min_distance() {
  min_distance_ = 0;
}
inline float MapPointData::_internal_min_distance() const {
  return min_distance_;
}
inline float MapPointData::min_distance() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.min_distance)
  return _internal_min_distance();
}
inline void MapPointData::_internal_set_min_distance(float value) {
  
  min_distance_ = value;
}
inline void MapPointData::set_min_distance(float value) {
  _internal_set_min_distance(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.min_distance)
}

// uint64 ref_kf_id = 4;
inline void MapPointData::clear_ref_kf_id() {
  ref_kf_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::_internal_ref_kf_id() const {
  return ref_kf_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::ref_kf_id() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.ref_kf_id)
  return _internal_ref_kf_id();
}
inline void MapPointData::_internal_set_ref_kf_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ref_kf_id_ = value;
}
inline void MapPointData::set_ref_kf_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ref_kf_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.ref_kf_id)
}

// uint64 ref_feat_id = 5;
inline void MapPointData::clear_ref_feat_id() {
  ref_feat_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::_internal_ref_feat_id() const {
  return ref_feat_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MapPointData::ref_feat_id() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.ref_feat_id)
  return _internal_ref_feat_id();
}
inline void MapPointData::_internal_set_ref_feat_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ref_feat_id_ = value;
}
inline void MapPointData::set_ref_feat_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ref_feat_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.ref_feat_id)
}

// int32 matches_in_track = 6;
inline void MapPointData::clear_matches_in_track() {
  matches_in_track_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapPointData::_internal_matches_in_track() const {
  return matches_in_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapPointData::matches_in_track() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.matches_in_track)
  return _internal_matches_in_track();
}
inline void MapPointData::_internal_set_matches_in_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  matches_in_track_ = value;
}
inline void MapPointData::set_matches_in_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_matches_in_track(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.matches_in_track)
}

// int32 inliers_in_track = 7;
inline void MapPointData::clear_inliers_in_track() {
  inliers_in_track_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapPointData::_internal_inliers_in_track() const {
  return inliers_in_track_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MapPointData::inliers_in_track() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.inliers_in_track)
  return _internal_inliers_in_track();
}
inline void MapPointData::_internal_set_inliers_in_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  inliers_in_track_ = value;
}
inline void MapPointData::set_inliers_in_track(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_inliers_in_track(value);
  // @@protoc_insertion_point(field_set:orbslam2.MapPointData.inliers_in_track)
}

// .orbslam2.Vector3 position = 8;
inline bool MapPointData::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MapPointData::has_position() const {
  return _internal_has_position();
}
inline void MapPointData::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::orbslam2::Vector3& MapPointData::_internal_position() const {
  const ::orbslam2::Vector3* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::Vector3*>(
      &::orbslam2::_Vector3_default_instance_);
}
inline const ::orbslam2::Vector3& MapPointData::position() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.position)
  return _internal_position();
}
inline void MapPointData::unsafe_arena_set_allocated_position(
    ::orbslam2::Vector3* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.MapPointData.position)
}
inline ::orbslam2::Vector3* MapPointData::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::Vector3* MapPointData::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:orbslam2.MapPointData.position)
  
  ::orbslam2::Vector3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::orbslam2::Vector3* MapPointData::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::Vector3>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::orbslam2::Vector3* MapPointData::mutable_position() {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapPointData.position)
  return _internal_mutable_position();
}
inline void MapPointData::set_allocated_position(::orbslam2::Vector3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.MapPointData.position)
}

// .orbslam2.Vector3 view_direction = 9;
inline bool MapPointData::_internal_has_view_direction() const {
  return this != internal_default_instance() && view_direction_ != nullptr;
}
inline bool MapPointData::has_view_direction() const {
  return _internal_has_view_direction();
}
inline void MapPointData::clear_view_direction() {
  if (GetArena() == nullptr && view_direction_ != nullptr) {
    delete view_direction_;
  }
  view_direction_ = nullptr;
}
inline const ::orbslam2::Vector3& MapPointData::_internal_view_direction() const {
  const ::orbslam2::Vector3* p = view_direction_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::Vector3*>(
      &::orbslam2::_Vector3_default_instance_);
}
inline const ::orbslam2::Vector3& MapPointData::view_direction() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.view_direction)
  return _internal_view_direction();
}
inline void MapPointData::unsafe_arena_set_allocated_view_direction(
    ::orbslam2::Vector3* view_direction) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_direction_);
  }
  view_direction_ = view_direction;
  if (view_direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.MapPointData.view_direction)
}
inline ::orbslam2::Vector3* MapPointData::release_view_direction() {
  auto temp = unsafe_arena_release_view_direction();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::Vector3* MapPointData::unsafe_arena_release_view_direction() {
  // @@protoc_insertion_point(field_release:orbslam2.MapPointData.view_direction)
  
  ::orbslam2::Vector3* temp = view_direction_;
  view_direction_ = nullptr;
  return temp;
}
inline ::orbslam2::Vector3* MapPointData::_internal_mutable_view_direction() {
  
  if (view_direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::Vector3>(GetArena());
    view_direction_ = p;
  }
  return view_direction_;
}
inline ::orbslam2::Vector3* MapPointData::mutable_view_direction() {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapPointData.view_direction)
  return _internal_mutable_view_direction();
}
inline void MapPointData::set_allocated_view_direction(::orbslam2::Vector3* view_direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete view_direction_;
  }
  if (view_direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(view_direction);
    if (message_arena != submessage_arena) {
      view_direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_direction, submessage_arena);
    }
    
  } else {
    
  }
  view_direction_ = view_direction;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.MapPointData.view_direction)
}

// .orbslam2.Descriptor desc = 10;
inline bool MapPointData::_internal_has_desc() const {
  return this != internal_default_instance() && desc_ != nullptr;
}
inline bool MapPointData::has_desc() const {
  return _internal_has_desc();
}
inline const ::orbslam2::Descriptor& MapPointData::_internal_desc() const {
  const ::orbslam2::Descriptor* p = desc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::Descriptor*>(
      &::orbslam2::_Descriptor_default_instance_);
}
inline const ::orbslam2::Descriptor& MapPointData::desc() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointData.desc)
  return _internal_desc();
}
inline void MapPointData::unsafe_arena_set_allocated_desc(
    ::orbslam2::Descriptor* desc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  desc_ = desc;
  if (desc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.MapPointData.desc)
}
inline ::orbslam2::Descriptor* MapPointData::release_desc() {
  auto temp = unsafe_arena_release_desc();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::Descriptor* MapPointData::unsafe_arena_release_desc() {
  // @@protoc_insertion_point(field_release:orbslam2.MapPointData.desc)
  
  ::orbslam2::Descriptor* temp = desc_;
  desc_ = nullptr;
  return temp;
}
inline ::orbslam2::Descriptor* MapPointData::_internal_mutable_desc() {
  
  if (desc_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::Descriptor>(GetArena());
    desc_ = p;
  }
  return desc_;
}
inline ::orbslam2::Descriptor* MapPointData::mutable_desc() {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapPointData.desc)
  return _internal_mutable_desc();
}
inline void MapPointData::set_allocated_desc(::orbslam2::Descriptor* desc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc_);
  }
  if (desc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(desc)->GetArena();
    if (message_arena != submessage_arena) {
      desc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, desc, submessage_arena);
    }
    
  } else {
    
  }
  desc_ = desc;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.MapPointData.desc)
}

// -------------------------------------------------------------------

// MapPointList

// repeated .orbslam2.MapPointData mappoints = 1;
inline int MapPointList::_internal_mappoints_size() const {
  return mappoints_.size();
}
inline int MapPointList::mappoints_size() const {
  return _internal_mappoints_size();
}
inline void MapPointList::clear_mappoints() {
  mappoints_.Clear();
}
inline ::orbslam2::MapPointData* MapPointList::mutable_mappoints(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapPointList.mappoints)
  return mappoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::MapPointData >*
MapPointList::mutable_mappoints() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.MapPointList.mappoints)
  return &mappoints_;
}
inline const ::orbslam2::MapPointData& MapPointList::_internal_mappoints(int index) const {
  return mappoints_.Get(index);
}
inline const ::orbslam2::MapPointData& MapPointList::mappoints(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.MapPointList.mappoints)
  return _internal_mappoints(index);
}
inline ::orbslam2::MapPointData* MapPointList::_internal_add_mappoints() {
  return mappoints_.Add();
}
inline ::orbslam2::MapPointData* MapPointList::add_mappoints() {
  // @@protoc_insertion_point(field_add:orbslam2.MapPointList.mappoints)
  return _internal_add_mappoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::MapPointData >&
MapPointList::mappoints() const {
  // @@protoc_insertion_point(field_list:orbslam2.MapPointList.mappoints)
  return mappoints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orbslam2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_MapPoint_2eproto
