// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Keyframe.proto

#include "Keyframe.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BowVector_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectedKeyFrame_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Descriptor_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeatureVector_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureVector_FeatureNode_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_KeyFrameData_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyPoint_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_Keyframe_2eproto;
namespace orbslam2 {
class KeyPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyPoint> _instance;
} _KeyPoint_default_instance_;
class DescriptorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Descriptor> _instance;
} _Descriptor_default_instance_;
class BowVector_WordsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BowVector_WordsEntry_DoNotUse> _instance;
} _BowVector_WordsEntry_DoNotUse_default_instance_;
class BowVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BowVector> _instance;
} _BowVector_default_instance_;
class FeatureVector_FeatureNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureVector_FeatureNode> _instance;
} _FeatureVector_FeatureNode_default_instance_;
class FeatureVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FeatureVector> _instance;
} _FeatureVector_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose> _instance;
} _Pose_default_instance_;
class ConnectedKeyFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConnectedKeyFrame> _instance;
} _ConnectedKeyFrame_default_instance_;
class KeyFrameDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyFrameData> _instance;
} _KeyFrameData_default_instance_;
class KeyFrameListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyFrameList> _instance;
} _KeyFrameList_default_instance_;
}  // namespace orbslam2
static void InitDefaultsscc_info_BowVector_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_BowVector_default_instance_;
    new (ptr) ::orbslam2::BowVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::BowVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BowVector_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BowVector_Keyframe_2eproto}, {
      &scc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto.base,}};

static void InitDefaultsscc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_BowVector_WordsEntry_DoNotUse_default_instance_;
    new (ptr) ::orbslam2::BowVector_WordsEntry_DoNotUse();
  }
  ::orbslam2::BowVector_WordsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto}, {}};

static void InitDefaultsscc_info_ConnectedKeyFrame_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_ConnectedKeyFrame_default_instance_;
    new (ptr) ::orbslam2::ConnectedKeyFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::ConnectedKeyFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ConnectedKeyFrame_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ConnectedKeyFrame_Keyframe_2eproto}, {}};

static void InitDefaultsscc_info_Descriptor_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_Descriptor_default_instance_;
    new (ptr) ::orbslam2::Descriptor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::Descriptor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Descriptor_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Descriptor_Keyframe_2eproto}, {}};

static void InitDefaultsscc_info_FeatureVector_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_FeatureVector_default_instance_;
    new (ptr) ::orbslam2::FeatureVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::FeatureVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FeatureVector_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FeatureVector_Keyframe_2eproto}, {
      &scc_info_FeatureVector_FeatureNode_Keyframe_2eproto.base,}};

static void InitDefaultsscc_info_FeatureVector_FeatureNode_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_FeatureVector_FeatureNode_default_instance_;
    new (ptr) ::orbslam2::FeatureVector_FeatureNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::FeatureVector_FeatureNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FeatureVector_FeatureNode_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FeatureVector_FeatureNode_Keyframe_2eproto}, {}};

static void InitDefaultsscc_info_KeyFrameData_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_KeyFrameData_default_instance_;
    new (ptr) ::orbslam2::KeyFrameData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::KeyFrameData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_KeyFrameData_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_KeyFrameData_Keyframe_2eproto}, {
      &scc_info_KeyPoint_Keyframe_2eproto.base,
      &scc_info_Descriptor_Keyframe_2eproto.base,
      &scc_info_BowVector_Keyframe_2eproto.base,
      &scc_info_FeatureVector_Keyframe_2eproto.base,
      &scc_info_Pose_Keyframe_2eproto.base,
      &scc_info_ConnectedKeyFrame_Keyframe_2eproto.base,}};

static void InitDefaultsscc_info_KeyFrameList_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_KeyFrameList_default_instance_;
    new (ptr) ::orbslam2::KeyFrameList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::KeyFrameList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyFrameList_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_KeyFrameList_Keyframe_2eproto}, {
      &scc_info_KeyFrameData_Keyframe_2eproto.base,}};

static void InitDefaultsscc_info_KeyPoint_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_KeyPoint_default_instance_;
    new (ptr) ::orbslam2::KeyPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::KeyPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyPoint_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyPoint_Keyframe_2eproto}, {}};

static void InitDefaultsscc_info_Pose_Keyframe_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_Pose_default_instance_;
    new (ptr) ::orbslam2::Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_Keyframe_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pose_Keyframe_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Keyframe_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Keyframe_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Keyframe_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Keyframe_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyPoint, x_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyPoint, y_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyPoint, octave_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyPoint, angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Descriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Descriptor, data_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector_WordsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector_WordsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector_WordsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector_WordsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::BowVector, words_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::FeatureVector_FeatureNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::FeatureVector_FeatureNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::FeatureVector_FeatureNode, feature_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::FeatureVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::FeatureVector, nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Pose, rotation_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::Pose, translation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::ConnectedKeyFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::ConnectedKeyFrame, id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::ConnectedKeyFrame, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, max_u_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, max_v_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, min_u_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, min_v_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, keypoints_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, right_u_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, depths_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, descriptors_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, bow_vector_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, feature_vector_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, pose_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, connected_kfs_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, children_ids_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, loop_edges_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameData, map_points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameList, next_id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameList, scale_factors_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::KeyFrameList, keyframes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::orbslam2::KeyPoint)},
  { 9, -1, sizeof(::orbslam2::Descriptor)},
  { 15, 22, sizeof(::orbslam2::BowVector_WordsEntry_DoNotUse)},
  { 24, -1, sizeof(::orbslam2::BowVector)},
  { 30, -1, sizeof(::orbslam2::FeatureVector_FeatureNode)},
  { 37, -1, sizeof(::orbslam2::FeatureVector)},
  { 43, -1, sizeof(::orbslam2::Pose)},
  { 50, -1, sizeof(::orbslam2::ConnectedKeyFrame)},
  { 57, -1, sizeof(::orbslam2::KeyFrameData)},
  { 78, -1, sizeof(::orbslam2::KeyFrameList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_KeyPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_Descriptor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_BowVector_WordsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_BowVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_FeatureVector_FeatureNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_FeatureVector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_ConnectedKeyFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_KeyFrameData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_KeyFrameList_default_instance_),
};

const char descriptor_table_protodef_Keyframe_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Keyframe.proto\022\010orbslam2\"\?\n\010KeyPoint\022\t"
  "\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\016\n\006octave\030\003 \001(\005\022\r\n\005"
  "angle\030\004 \001(\002\"\032\n\nDescriptor\022\014\n\004data\030\001 \001(\014\""
  "h\n\tBowVector\022-\n\005words\030\001 \003(\0132\036.orbslam2.B"
  "owVector.WordsEntry\032,\n\nWordsEntry\022\013\n\003key"
  "\030\001 \001(\r\022\r\n\005value\030\002 \001(\001:\0028\001\"x\n\rFeatureVect"
  "or\0222\n\005nodes\030\001 \003(\0132#.orbslam2.FeatureVect"
  "or.FeatureNode\0323\n\013FeatureNode\022\017\n\007node_id"
  "\030\001 \001(\r\022\023\n\013feature_ids\030\002 \003(\r\"-\n\004Pose\022\020\n\010r"
  "otation\030\001 \003(\002\022\023\n\013translation\030\002 \003(\002\"/\n\021Co"
  "nnectedKeyFrame\022\n\n\002id\030\001 \001(\004\022\016\n\006weight\030\002 "
  "\001(\005\"\263\003\n\014KeyFrameData\022\n\n\002id\030\001 \001(\004\022\r\n\005max_"
  "u\030\002 \001(\002\022\r\n\005max_v\030\003 \001(\002\022\r\n\005min_u\030\004 \001(\002\022\r\n"
  "\005min_v\030\005 \001(\002\022%\n\tkeypoints\030\006 \003(\0132\022.orbsla"
  "m2.KeyPoint\022\017\n\007right_u\030\007 \003(\002\022\016\n\006depths\030\010"
  " \003(\002\022)\n\013descriptors\030\t \003(\0132\024.orbslam2.Des"
  "criptor\022\'\n\nbow_vector\030\n \001(\0132\023.orbslam2.B"
  "owVector\022/\n\016feature_vector\030\013 \001(\0132\027.orbsl"
  "am2.FeatureVector\022\034\n\004pose\030\014 \001(\0132\016.orbsla"
  "m2.Pose\0222\n\rconnected_kfs\030\r \003(\0132\033.orbslam"
  "2.ConnectedKeyFrame\022\024\n\014children_ids\030\016 \003("
  "\004\022\022\n\nloop_edges\030\017 \003(\004\022\022\n\nmap_points\030\020 \003("
  "\003\"a\n\014KeyFrameList\022\017\n\007next_id\030\001 \001(\004\022\025\n\rsc"
  "ale_factors\030\002 \003(\002\022)\n\tkeyframes\030\003 \003(\0132\026.o"
  "rbslam2.KeyFrameDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Keyframe_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Keyframe_2eproto_sccs[10] = {
  &scc_info_BowVector_Keyframe_2eproto.base,
  &scc_info_BowVector_WordsEntry_DoNotUse_Keyframe_2eproto.base,
  &scc_info_ConnectedKeyFrame_Keyframe_2eproto.base,
  &scc_info_Descriptor_Keyframe_2eproto.base,
  &scc_info_FeatureVector_Keyframe_2eproto.base,
  &scc_info_FeatureVector_FeatureNode_Keyframe_2eproto.base,
  &scc_info_KeyFrameData_Keyframe_2eproto.base,
  &scc_info_KeyFrameList_Keyframe_2eproto.base,
  &scc_info_KeyPoint_Keyframe_2eproto.base,
  &scc_info_Pose_Keyframe_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Keyframe_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Keyframe_2eproto = {
  false, false, descriptor_table_protodef_Keyframe_2eproto, "Keyframe.proto", 988,
  &descriptor_table_Keyframe_2eproto_once, descriptor_table_Keyframe_2eproto_sccs, descriptor_table_Keyframe_2eproto_deps, 10, 0,
  schemas, file_default_instances, TableStruct_Keyframe_2eproto::offsets,
  file_level_metadata_Keyframe_2eproto, 10, file_level_enum_descriptors_Keyframe_2eproto, file_level_service_descriptors_Keyframe_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Keyframe_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Keyframe_2eproto)), true);
namespace orbslam2 {

// ===================================================================

void KeyPoint::InitAsDefaultInstance() {
}
class KeyPoint::_Internal {
 public:
};

KeyPoint::KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.KeyPoint)
}
KeyPoint::KeyPoint(const KeyPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:orbslam2.KeyPoint)
}

void KeyPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
}

KeyPoint::~KeyPoint() {
  // @@protoc_insertion_point(destructor:orbslam2.KeyPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyPoint::ArenaDtor(void* object) {
  KeyPoint* _this = reinterpret_cast< KeyPoint* >(object);
  (void)_this;
}
void KeyPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyPoint& KeyPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyPoint_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void KeyPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angle_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 octave = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          octave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.KeyPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // int32 octave = 3;
  if (this->octave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_octave(), target);
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.KeyPoint)
  return target;
}

size_t KeyPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.KeyPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 octave = 3;
  if (this->octave() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_octave());
  }

  // float angle = 4;
  if (!(this->angle() <= 0 && this->angle() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.KeyPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.KeyPoint)
    MergeFrom(*source);
  }
}

void KeyPoint::MergeFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.KeyPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from.octave() != 0) {
    _internal_set_octave(from._internal_octave());
  }
  if (!(from.angle() <= 0 && from.angle() >= 0)) {
    _internal_set_angle(from._internal_angle());
  }
}

void KeyPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyPoint::CopyFrom(const KeyPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.KeyPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyPoint::IsInitialized() const {
  return true;
}

void KeyPoint::InternalSwap(KeyPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyPoint, angle_)
      + sizeof(KeyPoint::angle_)
      - PROTOBUF_FIELD_OFFSET(KeyPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Descriptor::InitAsDefaultInstance() {
}
class Descriptor::_Internal {
 public:
};

Descriptor::Descriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.Descriptor)
}
Descriptor::Descriptor(const Descriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:orbslam2.Descriptor)
}

void Descriptor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Descriptor_Keyframe_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Descriptor::~Descriptor() {
  // @@protoc_insertion_point(destructor:orbslam2.Descriptor)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Descriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Descriptor::ArenaDtor(void* object) {
  Descriptor* _this = reinterpret_cast< Descriptor* >(object);
  (void)_this;
}
void Descriptor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Descriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Descriptor& Descriptor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Descriptor_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void Descriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.Descriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Descriptor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Descriptor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.Descriptor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.Descriptor)
  return target;
}

size_t Descriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.Descriptor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Descriptor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.Descriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const Descriptor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Descriptor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.Descriptor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.Descriptor)
    MergeFrom(*source);
  }
}

void Descriptor::MergeFrom(const Descriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.Descriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void Descriptor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.Descriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Descriptor::CopyFrom(const Descriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.Descriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Descriptor::IsInitialized() const {
  return true;
}

void Descriptor::InternalSwap(Descriptor* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Descriptor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

BowVector_WordsEntry_DoNotUse::BowVector_WordsEntry_DoNotUse() {}
BowVector_WordsEntry_DoNotUse::BowVector_WordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BowVector_WordsEntry_DoNotUse::MergeFrom(const BowVector_WordsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BowVector_WordsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void BowVector_WordsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void BowVector::InitAsDefaultInstance() {
}
class BowVector::_Internal {
 public:
};

BowVector::BowVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  words_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.BowVector)
}
BowVector::BowVector(const BowVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  words_.MergeFrom(from.words_);
  // @@protoc_insertion_point(copy_constructor:orbslam2.BowVector)
}

void BowVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BowVector_Keyframe_2eproto.base);
}

BowVector::~BowVector() {
  // @@protoc_insertion_point(destructor:orbslam2.BowVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BowVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BowVector::ArenaDtor(void* object) {
  BowVector* _this = reinterpret_cast< BowVector* >(object);
  (void)_this;
}
void BowVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BowVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BowVector& BowVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BowVector_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void BowVector::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.BowVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  words_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BowVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<uint32, double> words = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&words_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BowVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.BowVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, double> words = 1;
  if (!this->_internal_words().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::uint32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_words().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_words().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >::const_iterator
          it = this->_internal_words().begin();
          it != this->_internal_words().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = BowVector_WordsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >::const_iterator
          it = this->_internal_words().begin();
          it != this->_internal_words().end(); ++it) {
        target = BowVector_WordsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.BowVector)
  return target;
}

size_t BowVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.BowVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, double> words = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_words_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >::const_iterator
      it = this->_internal_words().begin();
      it != this->_internal_words().end(); ++it) {
    total_size += BowVector_WordsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BowVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.BowVector)
  GOOGLE_DCHECK_NE(&from, this);
  const BowVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BowVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.BowVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.BowVector)
    MergeFrom(*source);
  }
}

void BowVector::MergeFrom(const BowVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.BowVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  words_.MergeFrom(from.words_);
}

void BowVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.BowVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BowVector::CopyFrom(const BowVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.BowVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BowVector::IsInitialized() const {
  return true;
}

void BowVector::InternalSwap(BowVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  words_.Swap(&other->words_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BowVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureVector_FeatureNode::InitAsDefaultInstance() {
}
class FeatureVector_FeatureNode::_Internal {
 public:
};

FeatureVector_FeatureNode::FeatureVector_FeatureNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  feature_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.FeatureVector.FeatureNode)
}
FeatureVector_FeatureNode::FeatureVector_FeatureNode(const FeatureVector_FeatureNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      feature_ids_(from.feature_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_ = from.node_id_;
  // @@protoc_insertion_point(copy_constructor:orbslam2.FeatureVector.FeatureNode)
}

void FeatureVector_FeatureNode::SharedCtor() {
  node_id_ = 0u;
}

FeatureVector_FeatureNode::~FeatureVector_FeatureNode() {
  // @@protoc_insertion_point(destructor:orbslam2.FeatureVector.FeatureNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureVector_FeatureNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeatureVector_FeatureNode::ArenaDtor(void* object) {
  FeatureVector_FeatureNode* _this = reinterpret_cast< FeatureVector_FeatureNode* >(object);
  (void)_this;
}
void FeatureVector_FeatureNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureVector_FeatureNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureVector_FeatureNode& FeatureVector_FeatureNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureVector_FeatureNode_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void FeatureVector_FeatureNode::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.FeatureVector.FeatureNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  feature_ids_.Clear();
  node_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureVector_FeatureNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 feature_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_feature_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_feature_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureVector_FeatureNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.FeatureVector.FeatureNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_node_id(), target);
  }

  // repeated uint32 feature_ids = 2;
  {
    int byte_size = _feature_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_feature_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.FeatureVector.FeatureNode)
  return target;
}

size_t FeatureVector_FeatureNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.FeatureVector.FeatureNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 feature_ids = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->feature_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _feature_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // uint32 node_id = 1;
  if (this->node_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_node_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureVector_FeatureNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.FeatureVector.FeatureNode)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureVector_FeatureNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureVector_FeatureNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.FeatureVector.FeatureNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.FeatureVector.FeatureNode)
    MergeFrom(*source);
  }
}

void FeatureVector_FeatureNode::MergeFrom(const FeatureVector_FeatureNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.FeatureVector.FeatureNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  feature_ids_.MergeFrom(from.feature_ids_);
  if (from.node_id() != 0) {
    _internal_set_node_id(from._internal_node_id());
  }
}

void FeatureVector_FeatureNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.FeatureVector.FeatureNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureVector_FeatureNode::CopyFrom(const FeatureVector_FeatureNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.FeatureVector.FeatureNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureVector_FeatureNode::IsInitialized() const {
  return true;
}

void FeatureVector_FeatureNode::InternalSwap(FeatureVector_FeatureNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  feature_ids_.InternalSwap(&other->feature_ids_);
  swap(node_id_, other->node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureVector_FeatureNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FeatureVector::InitAsDefaultInstance() {
}
class FeatureVector::_Internal {
 public:
};

FeatureVector::FeatureVector(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.FeatureVector)
}
FeatureVector::FeatureVector(const FeatureVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orbslam2.FeatureVector)
}

void FeatureVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FeatureVector_Keyframe_2eproto.base);
}

FeatureVector::~FeatureVector() {
  // @@protoc_insertion_point(destructor:orbslam2.FeatureVector)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FeatureVector::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void FeatureVector::ArenaDtor(void* object) {
  FeatureVector* _this = reinterpret_cast< FeatureVector* >(object);
  (void)_this;
}
void FeatureVector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FeatureVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FeatureVector& FeatureVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FeatureVector_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void FeatureVector::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.FeatureVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeatureVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .orbslam2.FeatureVector.FeatureNode nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FeatureVector::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.FeatureVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .orbslam2.FeatureVector.FeatureNode nodes = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_nodes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_nodes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.FeatureVector)
  return target;
}

size_t FeatureVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.FeatureVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .orbslam2.FeatureVector.FeatureNode nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeatureVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.FeatureVector)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FeatureVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.FeatureVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.FeatureVector)
    MergeFrom(*source);
  }
}

void FeatureVector::MergeFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.FeatureVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
}

void FeatureVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureVector::CopyFrom(const FeatureVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.FeatureVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureVector::IsInitialized() const {
  return true;
}

void FeatureVector::InternalSwap(FeatureVector* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.InternalSwap(&other->nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeatureVector::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
}
class Pose::_Internal {
 public:
};

Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rotation_(arena),
  translation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rotation_(from.rotation_),
      translation_(from.translation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orbslam2.Pose)
}

void Pose::SharedCtor() {
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:orbslam2.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose& Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rotation_.Clear();
  translation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_rotation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_rotation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float translation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_translation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_translation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float rotation = 1;
  if (this->_internal_rotation_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_rotation(), target);
  }

  // repeated float translation = 2;
  if (this->_internal_translation_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_translation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float rotation = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_rotation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _rotation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float translation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_translation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _translation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rotation_.MergeFrom(from.rotation_);
  translation_.MergeFrom(from.translation_);
}

void Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rotation_.InternalSwap(&other->rotation_);
  translation_.InternalSwap(&other->translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ConnectedKeyFrame::InitAsDefaultInstance() {
}
class ConnectedKeyFrame::_Internal {
 public:
};

ConnectedKeyFrame::ConnectedKeyFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.ConnectedKeyFrame)
}
ConnectedKeyFrame::ConnectedKeyFrame(const ConnectedKeyFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:orbslam2.ConnectedKeyFrame)
}

void ConnectedKeyFrame::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
}

ConnectedKeyFrame::~ConnectedKeyFrame() {
  // @@protoc_insertion_point(destructor:orbslam2.ConnectedKeyFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConnectedKeyFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ConnectedKeyFrame::ArenaDtor(void* object) {
  ConnectedKeyFrame* _this = reinterpret_cast< ConnectedKeyFrame* >(object);
  (void)_this;
}
void ConnectedKeyFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectedKeyFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConnectedKeyFrame& ConnectedKeyFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConnectedKeyFrame_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void ConnectedKeyFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.ConnectedKeyFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&id_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectedKeyFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConnectedKeyFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.ConnectedKeyFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.ConnectedKeyFrame)
  return target;
}

size_t ConnectedKeyFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.ConnectedKeyFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // int32 weight = 2;
  if (this->weight() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_weight());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectedKeyFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.ConnectedKeyFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectedKeyFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConnectedKeyFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.ConnectedKeyFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.ConnectedKeyFrame)
    MergeFrom(*source);
  }
}

void ConnectedKeyFrame::MergeFrom(const ConnectedKeyFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.ConnectedKeyFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
}

void ConnectedKeyFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.ConnectedKeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectedKeyFrame::CopyFrom(const ConnectedKeyFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.ConnectedKeyFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectedKeyFrame::IsInitialized() const {
  return true;
}

void ConnectedKeyFrame::InternalSwap(ConnectedKeyFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConnectedKeyFrame, weight_)
      + sizeof(ConnectedKeyFrame::weight_)
      - PROTOBUF_FIELD_OFFSET(ConnectedKeyFrame, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectedKeyFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyFrameData::InitAsDefaultInstance() {
  ::orbslam2::_KeyFrameData_default_instance_._instance.get_mutable()->bow_vector_ = const_cast< ::orbslam2::BowVector*>(
      ::orbslam2::BowVector::internal_default_instance());
  ::orbslam2::_KeyFrameData_default_instance_._instance.get_mutable()->feature_vector_ = const_cast< ::orbslam2::FeatureVector*>(
      ::orbslam2::FeatureVector::internal_default_instance());
  ::orbslam2::_KeyFrameData_default_instance_._instance.get_mutable()->pose_ = const_cast< ::orbslam2::Pose*>(
      ::orbslam2::Pose::internal_default_instance());
}
class KeyFrameData::_Internal {
 public:
  static const ::orbslam2::BowVector& bow_vector(const KeyFrameData* msg);
  static const ::orbslam2::FeatureVector& feature_vector(const KeyFrameData* msg);
  static const ::orbslam2::Pose& pose(const KeyFrameData* msg);
};

const ::orbslam2::BowVector&
KeyFrameData::_Internal::bow_vector(const KeyFrameData* msg) {
  return *msg->bow_vector_;
}
const ::orbslam2::FeatureVector&
KeyFrameData::_Internal::feature_vector(const KeyFrameData* msg) {
  return *msg->feature_vector_;
}
const ::orbslam2::Pose&
KeyFrameData::_Internal::pose(const KeyFrameData* msg) {
  return *msg->pose_;
}
KeyFrameData::KeyFrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keypoints_(arena),
  right_u_(arena),
  depths_(arena),
  descriptors_(arena),
  connected_kfs_(arena),
  children_ids_(arena),
  loop_edges_(arena),
  map_points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.KeyFrameData)
}
KeyFrameData::KeyFrameData(const KeyFrameData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keypoints_(from.keypoints_),
      right_u_(from.right_u_),
      depths_(from.depths_),
      descriptors_(from.descriptors_),
      connected_kfs_(from.connected_kfs_),
      children_ids_(from.children_ids_),
      loop_edges_(from.loop_edges_),
      map_points_(from.map_points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bow_vector()) {
    bow_vector_ = new ::orbslam2::BowVector(*from.bow_vector_);
  } else {
    bow_vector_ = nullptr;
  }
  if (from._internal_has_feature_vector()) {
    feature_vector_ = new ::orbslam2::FeatureVector(*from.feature_vector_);
  } else {
    feature_vector_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::orbslam2::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_v_) -
    reinterpret_cast<char*>(&id_)) + sizeof(min_v_));
  // @@protoc_insertion_point(copy_constructor:orbslam2.KeyFrameData)
}

void KeyFrameData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyFrameData_Keyframe_2eproto.base);
  ::memset(&bow_vector_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_v_) -
      reinterpret_cast<char*>(&bow_vector_)) + sizeof(min_v_));
}

KeyFrameData::~KeyFrameData() {
  // @@protoc_insertion_point(destructor:orbslam2.KeyFrameData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyFrameData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bow_vector_;
  if (this != internal_default_instance()) delete feature_vector_;
  if (this != internal_default_instance()) delete pose_;
}

void KeyFrameData::ArenaDtor(void* object) {
  KeyFrameData* _this = reinterpret_cast< KeyFrameData* >(object);
  (void)_this;
}
void KeyFrameData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyFrameData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyFrameData& KeyFrameData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyFrameData_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void KeyFrameData::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.KeyFrameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keypoints_.Clear();
  right_u_.Clear();
  depths_.Clear();
  descriptors_.Clear();
  connected_kfs_.Clear();
  children_ids_.Clear();
  loop_edges_.Clear();
  map_points_.Clear();
  if (GetArena() == nullptr && bow_vector_ != nullptr) {
    delete bow_vector_;
  }
  bow_vector_ = nullptr;
  if (GetArena() == nullptr && feature_vector_ != nullptr) {
    delete feature_vector_;
  }
  feature_vector_ = nullptr;
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&min_v_) -
      reinterpret_cast<char*>(&id_)) + sizeof(min_v_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyFrameData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_u = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_v = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_u = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          min_u_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_v = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .orbslam2.KeyPoint keypoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated float right_u = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_right_u(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61) {
          _internal_add_right_u(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float depths = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_depths(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69) {
          _internal_add_depths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .orbslam2.Descriptor descriptors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_descriptors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .orbslam2.BowVector bow_vector = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_bow_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.FeatureVector feature_vector = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_vector(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.Pose pose = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .orbslam2.ConnectedKeyFrame connected_kfs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connected_kfs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint64 children_ids = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_children_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112) {
          _internal_add_children_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 loop_edges = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_loop_edges(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120) {
          _internal_add_loop_edges(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 map_points = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_map_points(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128) {
          _internal_add_map_points(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyFrameData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.KeyFrameData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // float max_u = 2;
  if (!(this->max_u() <= 0 && this->max_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_u(), target);
  }

  // float max_v = 3;
  if (!(this->max_v() <= 0 && this->max_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_v(), target);
  }

  // float min_u = 4;
  if (!(this->min_u() <= 0 && this->min_u() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_min_u(), target);
  }

  // float min_v = 5;
  if (!(this->min_v() <= 0 && this->min_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min_v(), target);
  }

  // repeated .orbslam2.KeyPoint keypoints = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_keypoints(i), target, stream);
  }

  // repeated float right_u = 7;
  if (this->_internal_right_u_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_right_u(), target);
  }

  // repeated float depths = 8;
  if (this->_internal_depths_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_depths(), target);
  }

  // repeated .orbslam2.Descriptor descriptors = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_descriptors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_descriptors(i), target, stream);
  }

  // .orbslam2.BowVector bow_vector = 10;
  if (this->has_bow_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::bow_vector(this), target, stream);
  }

  // .orbslam2.FeatureVector feature_vector = 11;
  if (this->has_feature_vector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::feature_vector(this), target, stream);
  }

  // .orbslam2.Pose pose = 12;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::pose(this), target, stream);
  }

  // repeated .orbslam2.ConnectedKeyFrame connected_kfs = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connected_kfs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_connected_kfs(i), target, stream);
  }

  // repeated uint64 children_ids = 14;
  {
    int byte_size = _children_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          14, _internal_children_ids(), byte_size, target);
    }
  }

  // repeated uint64 loop_edges = 15;
  {
    int byte_size = _loop_edges_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          15, _internal_loop_edges(), byte_size, target);
    }
  }

  // repeated int64 map_points = 16;
  {
    int byte_size = _map_points_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          16, _internal_map_points(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.KeyFrameData)
  return target;
}

size_t KeyFrameData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.KeyFrameData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .orbslam2.KeyPoint keypoints = 6;
  total_size += 1UL * this->_internal_keypoints_size();
  for (const auto& msg : this->keypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float right_u = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_right_u_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _right_u_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float depths = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_depths_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _depths_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .orbslam2.Descriptor descriptors = 9;
  total_size += 1UL * this->_internal_descriptors_size();
  for (const auto& msg : this->descriptors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .orbslam2.ConnectedKeyFrame connected_kfs = 13;
  total_size += 1UL * this->_internal_connected_kfs_size();
  for (const auto& msg : this->connected_kfs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 children_ids = 14;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->children_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _children_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 loop_edges = 15;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->loop_edges_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _loop_edges_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 map_points = 16;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->map_points_);
    if (data_size > 0) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _map_points_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .orbslam2.BowVector bow_vector = 10;
  if (this->has_bow_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bow_vector_);
  }

  // .orbslam2.FeatureVector feature_vector = 11;
  if (this->has_feature_vector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_vector_);
  }

  // .orbslam2.Pose pose = 12;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // float max_u = 2;
  if (!(this->max_u() <= 0 && this->max_u() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_v = 3;
  if (!(this->max_v() <= 0 && this->max_v() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_u = 4;
  if (!(this->min_u() <= 0 && this->min_u() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_v = 5;
  if (!(this->min_v() <= 0 && this->min_v() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyFrameData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.KeyFrameData)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyFrameData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyFrameData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.KeyFrameData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.KeyFrameData)
    MergeFrom(*source);
  }
}

void KeyFrameData::MergeFrom(const KeyFrameData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.KeyFrameData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keypoints_.MergeFrom(from.keypoints_);
  right_u_.MergeFrom(from.right_u_);
  depths_.MergeFrom(from.depths_);
  descriptors_.MergeFrom(from.descriptors_);
  connected_kfs_.MergeFrom(from.connected_kfs_);
  children_ids_.MergeFrom(from.children_ids_);
  loop_edges_.MergeFrom(from.loop_edges_);
  map_points_.MergeFrom(from.map_points_);
  if (from.has_bow_vector()) {
    _internal_mutable_bow_vector()->::orbslam2::BowVector::MergeFrom(from._internal_bow_vector());
  }
  if (from.has_feature_vector()) {
    _internal_mutable_feature_vector()->::orbslam2::FeatureVector::MergeFrom(from._internal_feature_vector());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::orbslam2::Pose::MergeFrom(from._internal_pose());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.max_u() <= 0 && from.max_u() >= 0)) {
    _internal_set_max_u(from._internal_max_u());
  }
  if (!(from.max_v() <= 0 && from.max_v() >= 0)) {
    _internal_set_max_v(from._internal_max_v());
  }
  if (!(from.min_u() <= 0 && from.min_u() >= 0)) {
    _internal_set_min_u(from._internal_min_u());
  }
  if (!(from.min_v() <= 0 && from.min_v() >= 0)) {
    _internal_set_min_v(from._internal_min_v());
  }
}

void KeyFrameData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.KeyFrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyFrameData::CopyFrom(const KeyFrameData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.KeyFrameData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyFrameData::IsInitialized() const {
  return true;
}

void KeyFrameData::InternalSwap(KeyFrameData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keypoints_.InternalSwap(&other->keypoints_);
  right_u_.InternalSwap(&other->right_u_);
  depths_.InternalSwap(&other->depths_);
  descriptors_.InternalSwap(&other->descriptors_);
  connected_kfs_.InternalSwap(&other->connected_kfs_);
  children_ids_.InternalSwap(&other->children_ids_);
  loop_edges_.InternalSwap(&other->loop_edges_);
  map_points_.InternalSwap(&other->map_points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KeyFrameData, min_v_)
      + sizeof(KeyFrameData::min_v_)
      - PROTOBUF_FIELD_OFFSET(KeyFrameData, bow_vector_)>(
          reinterpret_cast<char*>(&bow_vector_),
          reinterpret_cast<char*>(&other->bow_vector_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyFrameData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyFrameList::InitAsDefaultInstance() {
}
class KeyFrameList::_Internal {
 public:
};

KeyFrameList::KeyFrameList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scale_factors_(arena),
  keyframes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.KeyFrameList)
}
KeyFrameList::KeyFrameList(const KeyFrameList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      scale_factors_(from.scale_factors_),
      keyframes_(from.keyframes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_id_ = from.next_id_;
  // @@protoc_insertion_point(copy_constructor:orbslam2.KeyFrameList)
}

void KeyFrameList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyFrameList_Keyframe_2eproto.base);
  next_id_ = PROTOBUF_ULONGLONG(0);
}

KeyFrameList::~KeyFrameList() {
  // @@protoc_insertion_point(destructor:orbslam2.KeyFrameList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KeyFrameList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void KeyFrameList::ArenaDtor(void* object) {
  KeyFrameList* _this = reinterpret_cast< KeyFrameList* >(object);
  (void)_this;
}
void KeyFrameList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KeyFrameList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyFrameList& KeyFrameList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyFrameList_Keyframe_2eproto.base);
  return *internal_default_instance();
}


void KeyFrameList::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.KeyFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scale_factors_.Clear();
  keyframes_.Clear();
  next_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyFrameList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 next_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          next_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float scale_factors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_scale_factors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_scale_factors(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .orbslam2.KeyFrameData keyframes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keyframes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyFrameList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.KeyFrameList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 next_id = 1;
  if (this->next_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_next_id(), target);
  }

  // repeated float scale_factors = 2;
  if (this->_internal_scale_factors_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_scale_factors(), target);
  }

  // repeated .orbslam2.KeyFrameData keyframes = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keyframes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_keyframes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.KeyFrameList)
  return target;
}

size_t KeyFrameList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.KeyFrameList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float scale_factors = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_scale_factors_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _scale_factors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .orbslam2.KeyFrameData keyframes = 3;
  total_size += 1UL * this->_internal_keyframes_size();
  for (const auto& msg : this->keyframes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 next_id = 1;
  if (this->next_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_next_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyFrameList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.KeyFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyFrameList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyFrameList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.KeyFrameList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.KeyFrameList)
    MergeFrom(*source);
  }
}

void KeyFrameList::MergeFrom(const KeyFrameList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.KeyFrameList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scale_factors_.MergeFrom(from.scale_factors_);
  keyframes_.MergeFrom(from.keyframes_);
  if (from.next_id() != 0) {
    _internal_set_next_id(from._internal_next_id());
  }
}

void KeyFrameList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.KeyFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyFrameList::CopyFrom(const KeyFrameList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.KeyFrameList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyFrameList::IsInitialized() const {
  return true;
}

void KeyFrameList::InternalSwap(KeyFrameList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  scale_factors_.InternalSwap(&other->scale_factors_);
  keyframes_.InternalSwap(&other->keyframes_);
  swap(next_id_, other->next_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyFrameList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orbslam2::KeyPoint* Arena::CreateMaybeMessage< ::orbslam2::KeyPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::KeyPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::Descriptor* Arena::CreateMaybeMessage< ::orbslam2::Descriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::Descriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::BowVector_WordsEntry_DoNotUse* Arena::CreateMaybeMessage< ::orbslam2::BowVector_WordsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::BowVector_WordsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::BowVector* Arena::CreateMaybeMessage< ::orbslam2::BowVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::BowVector >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::FeatureVector_FeatureNode* Arena::CreateMaybeMessage< ::orbslam2::FeatureVector_FeatureNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::FeatureVector_FeatureNode >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::FeatureVector* Arena::CreateMaybeMessage< ::orbslam2::FeatureVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::FeatureVector >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::Pose* Arena::CreateMaybeMessage< ::orbslam2::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::ConnectedKeyFrame* Arena::CreateMaybeMessage< ::orbslam2::ConnectedKeyFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::ConnectedKeyFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::KeyFrameData* Arena::CreateMaybeMessage< ::orbslam2::KeyFrameData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::KeyFrameData >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::KeyFrameList* Arena::CreateMaybeMessage< ::orbslam2::KeyFrameList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::KeyFrameList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
