// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Keyframe.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Keyframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Keyframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Keyframe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Keyframe_2eproto;
namespace orbslam2 {
class BowVector;
class BowVectorDefaultTypeInternal;
extern BowVectorDefaultTypeInternal _BowVector_default_instance_;
class BowVector_WordsEntry_DoNotUse;
class BowVector_WordsEntry_DoNotUseDefaultTypeInternal;
extern BowVector_WordsEntry_DoNotUseDefaultTypeInternal _BowVector_WordsEntry_DoNotUse_default_instance_;
class ConnectedKeyFrame;
class ConnectedKeyFrameDefaultTypeInternal;
extern ConnectedKeyFrameDefaultTypeInternal _ConnectedKeyFrame_default_instance_;
class Descriptor;
class DescriptorDefaultTypeInternal;
extern DescriptorDefaultTypeInternal _Descriptor_default_instance_;
class FeatureVector;
class FeatureVectorDefaultTypeInternal;
extern FeatureVectorDefaultTypeInternal _FeatureVector_default_instance_;
class FeatureVector_FeatureNode;
class FeatureVector_FeatureNodeDefaultTypeInternal;
extern FeatureVector_FeatureNodeDefaultTypeInternal _FeatureVector_FeatureNode_default_instance_;
class KeyFrameData;
class KeyFrameDataDefaultTypeInternal;
extern KeyFrameDataDefaultTypeInternal _KeyFrameData_default_instance_;
class KeyFrameList;
class KeyFrameListDefaultTypeInternal;
extern KeyFrameListDefaultTypeInternal _KeyFrameList_default_instance_;
class KeyPoint;
class KeyPointDefaultTypeInternal;
extern KeyPointDefaultTypeInternal _KeyPoint_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> ::orbslam2::BowVector* Arena::CreateMaybeMessage<::orbslam2::BowVector>(Arena*);
template<> ::orbslam2::BowVector_WordsEntry_DoNotUse* Arena::CreateMaybeMessage<::orbslam2::BowVector_WordsEntry_DoNotUse>(Arena*);
template<> ::orbslam2::ConnectedKeyFrame* Arena::CreateMaybeMessage<::orbslam2::ConnectedKeyFrame>(Arena*);
template<> ::orbslam2::Descriptor* Arena::CreateMaybeMessage<::orbslam2::Descriptor>(Arena*);
template<> ::orbslam2::FeatureVector* Arena::CreateMaybeMessage<::orbslam2::FeatureVector>(Arena*);
template<> ::orbslam2::FeatureVector_FeatureNode* Arena::CreateMaybeMessage<::orbslam2::FeatureVector_FeatureNode>(Arena*);
template<> ::orbslam2::KeyFrameData* Arena::CreateMaybeMessage<::orbslam2::KeyFrameData>(Arena*);
template<> ::orbslam2::KeyFrameList* Arena::CreateMaybeMessage<::orbslam2::KeyFrameList>(Arena*);
template<> ::orbslam2::KeyPoint* Arena::CreateMaybeMessage<::orbslam2::KeyPoint>(Arena*);
template<> ::orbslam2::Pose* Arena::CreateMaybeMessage<::orbslam2::Pose>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orbslam2 {

// ===================================================================

class KeyPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.KeyPoint) */ {
 public:
  inline KeyPoint() : KeyPoint(nullptr) {};
  virtual ~KeyPoint();

  KeyPoint(const KeyPoint& from);
  KeyPoint(KeyPoint&& from) noexcept
    : KeyPoint() {
    *this = ::std::move(from);
  }

  inline KeyPoint& operator=(const KeyPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPoint& operator=(KeyPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyPoint* internal_default_instance() {
    return reinterpret_cast<const KeyPoint*>(
               &_KeyPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPoint& a, KeyPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyPoint* New() const final {
    return CreateMaybeMessage<KeyPoint>(nullptr);
  }

  KeyPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyPoint& from);
  void MergeFrom(const KeyPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.KeyPoint";
  }
  protected:
  explicit KeyPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kOctaveFieldNumber = 3,
    kAngleFieldNumber = 4,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // int32 octave = 3;
  void clear_octave();
  ::PROTOBUF_NAMESPACE_ID::int32 octave() const;
  void set_octave(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_octave() const;
  void _internal_set_octave(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float angle = 4;
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.KeyPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  ::PROTOBUF_NAMESPACE_ID::int32 octave_;
  float angle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class Descriptor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.Descriptor) */ {
 public:
  inline Descriptor() : Descriptor(nullptr) {};
  virtual ~Descriptor();

  Descriptor(const Descriptor& from);
  Descriptor(Descriptor&& from) noexcept
    : Descriptor() {
    *this = ::std::move(from);
  }

  inline Descriptor& operator=(const Descriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Descriptor& operator=(Descriptor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Descriptor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Descriptor* internal_default_instance() {
    return reinterpret_cast<const Descriptor*>(
               &_Descriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Descriptor& a, Descriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(Descriptor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Descriptor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Descriptor* New() const final {
    return CreateMaybeMessage<Descriptor>(nullptr);
  }

  Descriptor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Descriptor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Descriptor& from);
  void MergeFrom(const Descriptor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Descriptor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.Descriptor";
  }
  protected:
  explicit Descriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.Descriptor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class BowVector_WordsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BowVector_WordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BowVector_WordsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  BowVector_WordsEntry_DoNotUse();
  BowVector_WordsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BowVector_WordsEntry_DoNotUse& other);
  static const BowVector_WordsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BowVector_WordsEntry_DoNotUse*>(&_BowVector_WordsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class BowVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.BowVector) */ {
 public:
  inline BowVector() : BowVector(nullptr) {};
  virtual ~BowVector();

  BowVector(const BowVector& from);
  BowVector(BowVector&& from) noexcept
    : BowVector() {
    *this = ::std::move(from);
  }

  inline BowVector& operator=(const BowVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline BowVector& operator=(BowVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BowVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BowVector* internal_default_instance() {
    return reinterpret_cast<const BowVector*>(
               &_BowVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BowVector& a, BowVector& b) {
    a.Swap(&b);
  }
  inline void Swap(BowVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BowVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BowVector* New() const final {
    return CreateMaybeMessage<BowVector>(nullptr);
  }

  BowVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BowVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BowVector& from);
  void MergeFrom(const BowVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BowVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.BowVector";
  }
  protected:
  explicit BowVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kWordsFieldNumber = 1,
  };
  // map<uint32, double> words = 1;
  int words_size() const;
  private:
  int _internal_words_size() const;
  public:
  void clear_words();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >&
      _internal_words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >*
      _internal_mutable_words();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >&
      words() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >*
      mutable_words();

  // @@protoc_insertion_point(class_scope:orbslam2.BowVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BowVector_WordsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > words_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class FeatureVector_FeatureNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.FeatureVector.FeatureNode) */ {
 public:
  inline FeatureVector_FeatureNode() : FeatureVector_FeatureNode(nullptr) {};
  virtual ~FeatureVector_FeatureNode();

  FeatureVector_FeatureNode(const FeatureVector_FeatureNode& from);
  FeatureVector_FeatureNode(FeatureVector_FeatureNode&& from) noexcept
    : FeatureVector_FeatureNode() {
    *this = ::std::move(from);
  }

  inline FeatureVector_FeatureNode& operator=(const FeatureVector_FeatureNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureVector_FeatureNode& operator=(FeatureVector_FeatureNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureVector_FeatureNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureVector_FeatureNode* internal_default_instance() {
    return reinterpret_cast<const FeatureVector_FeatureNode*>(
               &_FeatureVector_FeatureNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FeatureVector_FeatureNode& a, FeatureVector_FeatureNode& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureVector_FeatureNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureVector_FeatureNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureVector_FeatureNode* New() const final {
    return CreateMaybeMessage<FeatureVector_FeatureNode>(nullptr);
  }

  FeatureVector_FeatureNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureVector_FeatureNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureVector_FeatureNode& from);
  void MergeFrom(const FeatureVector_FeatureNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureVector_FeatureNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.FeatureVector.FeatureNode";
  }
  protected:
  explicit FeatureVector_FeatureNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeatureIdsFieldNumber = 2,
    kNodeIdFieldNumber = 1,
  };
  // repeated uint32 feature_ids = 2;
  int feature_ids_size() const;
  private:
  int _internal_feature_ids_size() const;
  public:
  void clear_feature_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_feature_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_feature_ids() const;
  void _internal_add_feature_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_feature_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 feature_ids(int index) const;
  void set_feature_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_feature_ids(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      feature_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_feature_ids();

  // uint32 node_id = 1;
  void clear_node_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id() const;
  void set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_node_id() const;
  void _internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.FeatureVector.FeatureNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > feature_ids_;
  mutable std::atomic<int> _feature_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 node_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class FeatureVector PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.FeatureVector) */ {
 public:
  inline FeatureVector() : FeatureVector(nullptr) {};
  virtual ~FeatureVector();

  FeatureVector(const FeatureVector& from);
  FeatureVector(FeatureVector&& from) noexcept
    : FeatureVector() {
    *this = ::std::move(from);
  }

  inline FeatureVector& operator=(const FeatureVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeatureVector& operator=(FeatureVector&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FeatureVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FeatureVector* internal_default_instance() {
    return reinterpret_cast<const FeatureVector*>(
               &_FeatureVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FeatureVector& a, FeatureVector& b) {
    a.Swap(&b);
  }
  inline void Swap(FeatureVector* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeatureVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FeatureVector* New() const final {
    return CreateMaybeMessage<FeatureVector>(nullptr);
  }

  FeatureVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FeatureVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FeatureVector& from);
  void MergeFrom(const FeatureVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FeatureVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.FeatureVector";
  }
  protected:
  explicit FeatureVector(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FeatureVector_FeatureNode FeatureNode;

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
  };
  // repeated .orbslam2.FeatureVector.FeatureNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::orbslam2::FeatureVector_FeatureNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::FeatureVector_FeatureNode >*
      mutable_nodes();
  private:
  const ::orbslam2::FeatureVector_FeatureNode& _internal_nodes(int index) const;
  ::orbslam2::FeatureVector_FeatureNode* _internal_add_nodes();
  public:
  const ::orbslam2::FeatureVector_FeatureNode& nodes(int index) const;
  ::orbslam2::FeatureVector_FeatureNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::FeatureVector_FeatureNode >&
      nodes() const;

  // @@protoc_insertion_point(class_scope:orbslam2.FeatureVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::FeatureVector_FeatureNode > nodes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotationFieldNumber = 1,
    kTranslationFieldNumber = 2,
  };
  // repeated float rotation = 1;
  int rotation_size() const;
  private:
  int _internal_rotation_size() const;
  public:
  void clear_rotation();
  private:
  float _internal_rotation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_rotation() const;
  void _internal_add_rotation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_rotation();
  public:
  float rotation(int index) const;
  void set_rotation(int index, float value);
  void add_rotation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      rotation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_rotation();

  // repeated float translation = 2;
  int translation_size() const;
  private:
  int _internal_translation_size() const;
  public:
  void clear_translation();
  private:
  float _internal_translation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_translation() const;
  void _internal_add_translation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_translation();
  public:
  float translation(int index) const;
  void set_translation(int index, float value);
  void add_translation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      translation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_translation();

  // @@protoc_insertion_point(class_scope:orbslam2.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > rotation_;
  mutable std::atomic<int> _rotation_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > translation_;
  mutable std::atomic<int> _translation_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class ConnectedKeyFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.ConnectedKeyFrame) */ {
 public:
  inline ConnectedKeyFrame() : ConnectedKeyFrame(nullptr) {};
  virtual ~ConnectedKeyFrame();

  ConnectedKeyFrame(const ConnectedKeyFrame& from);
  ConnectedKeyFrame(ConnectedKeyFrame&& from) noexcept
    : ConnectedKeyFrame() {
    *this = ::std::move(from);
  }

  inline ConnectedKeyFrame& operator=(const ConnectedKeyFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectedKeyFrame& operator=(ConnectedKeyFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConnectedKeyFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectedKeyFrame* internal_default_instance() {
    return reinterpret_cast<const ConnectedKeyFrame*>(
               &_ConnectedKeyFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ConnectedKeyFrame& a, ConnectedKeyFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectedKeyFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectedKeyFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConnectedKeyFrame* New() const final {
    return CreateMaybeMessage<ConnectedKeyFrame>(nullptr);
  }

  ConnectedKeyFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConnectedKeyFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConnectedKeyFrame& from);
  void MergeFrom(const ConnectedKeyFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectedKeyFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.ConnectedKeyFrame";
  }
  protected:
  explicit ConnectedKeyFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kWeightFieldNumber = 2,
  };
  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 weight = 2;
  void clear_weight();
  ::PROTOBUF_NAMESPACE_ID::int32 weight() const;
  void set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weight() const;
  void _internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.ConnectedKeyFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class KeyFrameData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.KeyFrameData) */ {
 public:
  inline KeyFrameData() : KeyFrameData(nullptr) {};
  virtual ~KeyFrameData();

  KeyFrameData(const KeyFrameData& from);
  KeyFrameData(KeyFrameData&& from) noexcept
    : KeyFrameData() {
    *this = ::std::move(from);
  }

  inline KeyFrameData& operator=(const KeyFrameData& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyFrameData& operator=(KeyFrameData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyFrameData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyFrameData* internal_default_instance() {
    return reinterpret_cast<const KeyFrameData*>(
               &_KeyFrameData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(KeyFrameData& a, KeyFrameData& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyFrameData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyFrameData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyFrameData* New() const final {
    return CreateMaybeMessage<KeyFrameData>(nullptr);
  }

  KeyFrameData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyFrameData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyFrameData& from);
  void MergeFrom(const KeyFrameData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyFrameData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.KeyFrameData";
  }
  protected:
  explicit KeyFrameData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeypointsFieldNumber = 6,
    kRightUFieldNumber = 7,
    kDepthsFieldNumber = 8,
    kDescriptorsFieldNumber = 9,
    kConnectedKfsFieldNumber = 13,
    kChildrenIdsFieldNumber = 14,
    kLoopEdgesFieldNumber = 15,
    kMapPointsFieldNumber = 16,
    kBowVectorFieldNumber = 10,
    kFeatureVectorFieldNumber = 11,
    kPoseFieldNumber = 12,
    kIdFieldNumber = 1,
    kMaxUFieldNumber = 2,
    kMaxVFieldNumber = 3,
    kMinUFieldNumber = 4,
    kMinVFieldNumber = 5,
  };
  // repeated .orbslam2.KeyPoint keypoints = 6;
  int keypoints_size() const;
  private:
  int _internal_keypoints_size() const;
  public:
  void clear_keypoints();
  ::orbslam2::KeyPoint* mutable_keypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyPoint >*
      mutable_keypoints();
  private:
  const ::orbslam2::KeyPoint& _internal_keypoints(int index) const;
  ::orbslam2::KeyPoint* _internal_add_keypoints();
  public:
  const ::orbslam2::KeyPoint& keypoints(int index) const;
  ::orbslam2::KeyPoint* add_keypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyPoint >&
      keypoints() const;

  // repeated float right_u = 7;
  int right_u_size() const;
  private:
  int _internal_right_u_size() const;
  public:
  void clear_right_u();
  private:
  float _internal_right_u(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_right_u() const;
  void _internal_add_right_u(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_right_u();
  public:
  float right_u(int index) const;
  void set_right_u(int index, float value);
  void add_right_u(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      right_u() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_right_u();

  // repeated float depths = 8;
  int depths_size() const;
  private:
  int _internal_depths_size() const;
  public:
  void clear_depths();
  private:
  float _internal_depths(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_depths() const;
  void _internal_add_depths(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_depths();
  public:
  float depths(int index) const;
  void set_depths(int index, float value);
  void add_depths(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      depths() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_depths();

  // repeated .orbslam2.Descriptor descriptors = 9;
  int descriptors_size() const;
  private:
  int _internal_descriptors_size() const;
  public:
  void clear_descriptors();
  ::orbslam2::Descriptor* mutable_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::Descriptor >*
      mutable_descriptors();
  private:
  const ::orbslam2::Descriptor& _internal_descriptors(int index) const;
  ::orbslam2::Descriptor* _internal_add_descriptors();
  public:
  const ::orbslam2::Descriptor& descriptors(int index) const;
  ::orbslam2::Descriptor* add_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::Descriptor >&
      descriptors() const;

  // repeated .orbslam2.ConnectedKeyFrame connected_kfs = 13;
  int connected_kfs_size() const;
  private:
  int _internal_connected_kfs_size() const;
  public:
  void clear_connected_kfs();
  ::orbslam2::ConnectedKeyFrame* mutable_connected_kfs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::ConnectedKeyFrame >*
      mutable_connected_kfs();
  private:
  const ::orbslam2::ConnectedKeyFrame& _internal_connected_kfs(int index) const;
  ::orbslam2::ConnectedKeyFrame* _internal_add_connected_kfs();
  public:
  const ::orbslam2::ConnectedKeyFrame& connected_kfs(int index) const;
  ::orbslam2::ConnectedKeyFrame* add_connected_kfs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::ConnectedKeyFrame >&
      connected_kfs() const;

  // repeated uint64 children_ids = 14;
  int children_ids_size() const;
  private:
  int _internal_children_ids_size() const;
  public:
  void clear_children_ids();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_children_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_children_ids() const;
  void _internal_add_children_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_children_ids();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 children_ids(int index) const;
  void set_children_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_children_ids(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      children_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_children_ids();

  // repeated uint64 loop_edges = 15;
  int loop_edges_size() const;
  private:
  int _internal_loop_edges_size() const;
  public:
  void clear_loop_edges();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_loop_edges(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_loop_edges() const;
  void _internal_add_loop_edges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_loop_edges();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 loop_edges(int index) const;
  void set_loop_edges(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_loop_edges(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      loop_edges() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_loop_edges();

  // repeated int64 map_points = 16;
  int map_points_size() const;
  private:
  int _internal_map_points_size() const;
  public:
  void clear_map_points();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_map_points(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_map_points() const;
  void _internal_add_map_points(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_map_points();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 map_points(int index) const;
  void set_map_points(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_map_points(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      map_points() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_map_points();

  // .orbslam2.BowVector bow_vector = 10;
  bool has_bow_vector() const;
  private:
  bool _internal_has_bow_vector() const;
  public:
  void clear_bow_vector();
  const ::orbslam2::BowVector& bow_vector() const;
  ::orbslam2::BowVector* release_bow_vector();
  ::orbslam2::BowVector* mutable_bow_vector();
  void set_allocated_bow_vector(::orbslam2::BowVector* bow_vector);
  private:
  const ::orbslam2::BowVector& _internal_bow_vector() const;
  ::orbslam2::BowVector* _internal_mutable_bow_vector();
  public:
  void unsafe_arena_set_allocated_bow_vector(
      ::orbslam2::BowVector* bow_vector);
  ::orbslam2::BowVector* unsafe_arena_release_bow_vector();

  // .orbslam2.FeatureVector feature_vector = 11;
  bool has_feature_vector() const;
  private:
  bool _internal_has_feature_vector() const;
  public:
  void clear_feature_vector();
  const ::orbslam2::FeatureVector& feature_vector() const;
  ::orbslam2::FeatureVector* release_feature_vector();
  ::orbslam2::FeatureVector* mutable_feature_vector();
  void set_allocated_feature_vector(::orbslam2::FeatureVector* feature_vector);
  private:
  const ::orbslam2::FeatureVector& _internal_feature_vector() const;
  ::orbslam2::FeatureVector* _internal_mutable_feature_vector();
  public:
  void unsafe_arena_set_allocated_feature_vector(
      ::orbslam2::FeatureVector* feature_vector);
  ::orbslam2::FeatureVector* unsafe_arena_release_feature_vector();

  // .orbslam2.Pose pose = 12;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::orbslam2::Pose& pose() const;
  ::orbslam2::Pose* release_pose();
  ::orbslam2::Pose* mutable_pose();
  void set_allocated_pose(::orbslam2::Pose* pose);
  private:
  const ::orbslam2::Pose& _internal_pose() const;
  ::orbslam2::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::orbslam2::Pose* pose);
  ::orbslam2::Pose* unsafe_arena_release_pose();

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // float max_u = 2;
  void clear_max_u();
  float max_u() const;
  void set_max_u(float value);
  private:
  float _internal_max_u() const;
  void _internal_set_max_u(float value);
  public:

  // float max_v = 3;
  void clear_max_v();
  float max_v() const;
  void set_max_v(float value);
  private:
  float _internal_max_v() const;
  void _internal_set_max_v(float value);
  public:

  // float min_u = 4;
  void clear_min_u();
  float min_u() const;
  void set_min_u(float value);
  private:
  float _internal_min_u() const;
  void _internal_set_min_u(float value);
  public:

  // float min_v = 5;
  void clear_min_v();
  float min_v() const;
  void set_min_v(float value);
  private:
  float _internal_min_v() const;
  void _internal_set_min_v(float value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.KeyFrameData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyPoint > keypoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > right_u_;
  mutable std::atomic<int> _right_u_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > depths_;
  mutable std::atomic<int> _depths_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::Descriptor > descriptors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::ConnectedKeyFrame > connected_kfs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > children_ids_;
  mutable std::atomic<int> _children_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > loop_edges_;
  mutable std::atomic<int> _loop_edges_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > map_points_;
  mutable std::atomic<int> _map_points_cached_byte_size_;
  ::orbslam2::BowVector* bow_vector_;
  ::orbslam2::FeatureVector* feature_vector_;
  ::orbslam2::Pose* pose_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  float max_u_;
  float max_v_;
  float min_u_;
  float min_v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// -------------------------------------------------------------------

class KeyFrameList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.KeyFrameList) */ {
 public:
  inline KeyFrameList() : KeyFrameList(nullptr) {};
  virtual ~KeyFrameList();

  KeyFrameList(const KeyFrameList& from);
  KeyFrameList(KeyFrameList&& from) noexcept
    : KeyFrameList() {
    *this = ::std::move(from);
  }

  inline KeyFrameList& operator=(const KeyFrameList& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyFrameList& operator=(KeyFrameList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyFrameList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyFrameList* internal_default_instance() {
    return reinterpret_cast<const KeyFrameList*>(
               &_KeyFrameList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(KeyFrameList& a, KeyFrameList& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyFrameList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyFrameList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyFrameList* New() const final {
    return CreateMaybeMessage<KeyFrameList>(nullptr);
  }

  KeyFrameList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyFrameList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyFrameList& from);
  void MergeFrom(const KeyFrameList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyFrameList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.KeyFrameList";
  }
  protected:
  explicit KeyFrameList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Keyframe_2eproto);
    return ::descriptor_table_Keyframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFactorsFieldNumber = 2,
    kKeyframesFieldNumber = 3,
    kNextIdFieldNumber = 1,
  };
  // repeated float scale_factors = 2;
  int scale_factors_size() const;
  private:
  int _internal_scale_factors_size() const;
  public:
  void clear_scale_factors();
  private:
  float _internal_scale_factors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_scale_factors() const;
  void _internal_add_scale_factors(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_scale_factors();
  public:
  float scale_factors(int index) const;
  void set_scale_factors(int index, float value);
  void add_scale_factors(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      scale_factors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_scale_factors();

  // repeated .orbslam2.KeyFrameData keyframes = 3;
  int keyframes_size() const;
  private:
  int _internal_keyframes_size() const;
  public:
  void clear_keyframes();
  ::orbslam2::KeyFrameData* mutable_keyframes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyFrameData >*
      mutable_keyframes();
  private:
  const ::orbslam2::KeyFrameData& _internal_keyframes(int index) const;
  ::orbslam2::KeyFrameData* _internal_add_keyframes();
  public:
  const ::orbslam2::KeyFrameData& keyframes(int index) const;
  ::orbslam2::KeyFrameData* add_keyframes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyFrameData >&
      keyframes() const;

  // uint64 next_id = 1;
  void clear_next_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id() const;
  void set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_next_id() const;
  void _internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:orbslam2.KeyFrameList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > scale_factors_;
  mutable std::atomic<int> _scale_factors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyFrameData > keyframes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 next_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Keyframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPoint

// float x = 1;
inline void KeyPoint::clear_x() {
  x_ = 0;
}
inline float KeyPoint::_internal_x() const {
  return x_;
}
inline float KeyPoint::x() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyPoint.x)
  return _internal_x();
}
inline void KeyPoint::_internal_set_x(float value) {
  
  x_ = value;
}
inline void KeyPoint::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyPoint.x)
}

// float y = 2;
inline void KeyPoint::clear_y() {
  y_ = 0;
}
inline float KeyPoint::_internal_y() const {
  return y_;
}
inline float KeyPoint::y() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyPoint.y)
  return _internal_y();
}
inline void KeyPoint::_internal_set_y(float value) {
  
  y_ = value;
}
inline void KeyPoint::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyPoint.y)
}

// int32 octave = 3;
inline void KeyPoint::clear_octave() {
  octave_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyPoint::_internal_octave() const {
  return octave_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 KeyPoint::octave() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyPoint.octave)
  return _internal_octave();
}
inline void KeyPoint::_internal_set_octave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  octave_ = value;
}
inline void KeyPoint::set_octave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_octave(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyPoint.octave)
}

// float angle = 4;
inline void KeyPoint::clear_angle() {
  angle_ = 0;
}
inline float KeyPoint::_internal_angle() const {
  return angle_;
}
inline float KeyPoint::angle() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyPoint.angle)
  return _internal_angle();
}
inline void KeyPoint::_internal_set_angle(float value) {
  
  angle_ = value;
}
inline void KeyPoint::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyPoint.angle)
}

// -------------------------------------------------------------------

// Descriptor

// bytes data = 1;
inline void Descriptor::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Descriptor::data() const {
  // @@protoc_insertion_point(field_get:orbslam2.Descriptor.data)
  return _internal_data();
}
inline void Descriptor::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:orbslam2.Descriptor.data)
}
inline std::string* Descriptor::mutable_data() {
  // @@protoc_insertion_point(field_mutable:orbslam2.Descriptor.data)
  return _internal_mutable_data();
}
inline const std::string& Descriptor::_internal_data() const {
  return data_.Get();
}
inline void Descriptor::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Descriptor::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:orbslam2.Descriptor.data)
}
inline void Descriptor::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:orbslam2.Descriptor.data)
}
inline void Descriptor::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:orbslam2.Descriptor.data)
}
inline std::string* Descriptor::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Descriptor::release_data() {
  // @@protoc_insertion_point(field_release:orbslam2.Descriptor.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Descriptor::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:orbslam2.Descriptor.data)
}
inline std::string* Descriptor::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:orbslam2.Descriptor.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Descriptor::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.Descriptor.data)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BowVector

// map<uint32, double> words = 1;
inline int BowVector::_internal_words_size() const {
  return words_.size();
}
inline int BowVector::words_size() const {
  return _internal_words_size();
}
inline void BowVector::clear_words() {
  words_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >&
BowVector::_internal_words() const {
  return words_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >&
BowVector::words() const {
  // @@protoc_insertion_point(field_map:orbslam2.BowVector.words)
  return _internal_words();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >*
BowVector::_internal_mutable_words() {
  return words_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, double >*
BowVector::mutable_words() {
  // @@protoc_insertion_point(field_mutable_map:orbslam2.BowVector.words)
  return _internal_mutable_words();
}

// -------------------------------------------------------------------

// FeatureVector_FeatureNode

// uint32 node_id = 1;
inline void FeatureVector_FeatureNode::clear_node_id() {
  node_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureVector_FeatureNode::_internal_node_id() const {
  return node_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureVector_FeatureNode::node_id() const {
  // @@protoc_insertion_point(field_get:orbslam2.FeatureVector.FeatureNode.node_id)
  return _internal_node_id();
}
inline void FeatureVector_FeatureNode::_internal_set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  node_id_ = value;
}
inline void FeatureVector_FeatureNode::set_node_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.FeatureVector.FeatureNode.node_id)
}

// repeated uint32 feature_ids = 2;
inline int FeatureVector_FeatureNode::_internal_feature_ids_size() const {
  return feature_ids_.size();
}
inline int FeatureVector_FeatureNode::feature_ids_size() const {
  return _internal_feature_ids_size();
}
inline void FeatureVector_FeatureNode::clear_feature_ids() {
  feature_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureVector_FeatureNode::_internal_feature_ids(int index) const {
  return feature_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FeatureVector_FeatureNode::feature_ids(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.FeatureVector.FeatureNode.feature_ids)
  return _internal_feature_ids(index);
}
inline void FeatureVector_FeatureNode::set_feature_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  feature_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.FeatureVector.FeatureNode.feature_ids)
}
inline void FeatureVector_FeatureNode::_internal_add_feature_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  feature_ids_.Add(value);
}
inline void FeatureVector_FeatureNode::add_feature_ids(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_feature_ids(value);
  // @@protoc_insertion_point(field_add:orbslam2.FeatureVector.FeatureNode.feature_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FeatureVector_FeatureNode::_internal_feature_ids() const {
  return feature_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
FeatureVector_FeatureNode::feature_ids() const {
  // @@protoc_insertion_point(field_list:orbslam2.FeatureVector.FeatureNode.feature_ids)
  return _internal_feature_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FeatureVector_FeatureNode::_internal_mutable_feature_ids() {
  return &feature_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
FeatureVector_FeatureNode::mutable_feature_ids() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.FeatureVector.FeatureNode.feature_ids)
  return _internal_mutable_feature_ids();
}

// -------------------------------------------------------------------

// FeatureVector

// repeated .orbslam2.FeatureVector.FeatureNode nodes = 1;
inline int FeatureVector::_internal_nodes_size() const {
  return nodes_.size();
}
inline int FeatureVector::nodes_size() const {
  return _internal_nodes_size();
}
inline void FeatureVector::clear_nodes() {
  nodes_.Clear();
}
inline ::orbslam2::FeatureVector_FeatureNode* FeatureVector::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.FeatureVector.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::FeatureVector_FeatureNode >*
FeatureVector::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.FeatureVector.nodes)
  return &nodes_;
}
inline const ::orbslam2::FeatureVector_FeatureNode& FeatureVector::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::orbslam2::FeatureVector_FeatureNode& FeatureVector::nodes(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.FeatureVector.nodes)
  return _internal_nodes(index);
}
inline ::orbslam2::FeatureVector_FeatureNode* FeatureVector::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::orbslam2::FeatureVector_FeatureNode* FeatureVector::add_nodes() {
  // @@protoc_insertion_point(field_add:orbslam2.FeatureVector.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::FeatureVector_FeatureNode >&
FeatureVector::nodes() const {
  // @@protoc_insertion_point(field_list:orbslam2.FeatureVector.nodes)
  return nodes_;
}

// -------------------------------------------------------------------

// Pose

// repeated float rotation = 1;
inline int Pose::_internal_rotation_size() const {
  return rotation_.size();
}
inline int Pose::rotation_size() const {
  return _internal_rotation_size();
}
inline void Pose::clear_rotation() {
  rotation_.Clear();
}
inline float Pose::_internal_rotation(int index) const {
  return rotation_.Get(index);
}
inline float Pose::rotation(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.Pose.rotation)
  return _internal_rotation(index);
}
inline void Pose::set_rotation(int index, float value) {
  rotation_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.Pose.rotation)
}
inline void Pose::_internal_add_rotation(float value) {
  rotation_.Add(value);
}
inline void Pose::add_rotation(float value) {
  _internal_add_rotation(value);
  // @@protoc_insertion_point(field_add:orbslam2.Pose.rotation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pose::_internal_rotation() const {
  return rotation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pose::rotation() const {
  // @@protoc_insertion_point(field_list:orbslam2.Pose.rotation)
  return _internal_rotation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pose::_internal_mutable_rotation() {
  return &rotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pose::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.Pose.rotation)
  return _internal_mutable_rotation();
}

// repeated float translation = 2;
inline int Pose::_internal_translation_size() const {
  return translation_.size();
}
inline int Pose::translation_size() const {
  return _internal_translation_size();
}
inline void Pose::clear_translation() {
  translation_.Clear();
}
inline float Pose::_internal_translation(int index) const {
  return translation_.Get(index);
}
inline float Pose::translation(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.Pose.translation)
  return _internal_translation(index);
}
inline void Pose::set_translation(int index, float value) {
  translation_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.Pose.translation)
}
inline void Pose::_internal_add_translation(float value) {
  translation_.Add(value);
}
inline void Pose::add_translation(float value) {
  _internal_add_translation(value);
  // @@protoc_insertion_point(field_add:orbslam2.Pose.translation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pose::_internal_translation() const {
  return translation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Pose::translation() const {
  // @@protoc_insertion_point(field_list:orbslam2.Pose.translation)
  return _internal_translation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pose::_internal_mutable_translation() {
  return &translation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Pose::mutable_translation() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.Pose.translation)
  return _internal_mutable_translation();
}

// -------------------------------------------------------------------

// ConnectedKeyFrame

// uint64 id = 1;
inline void ConnectedKeyFrame::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectedKeyFrame::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ConnectedKeyFrame::id() const {
  // @@protoc_insertion_point(field_get:orbslam2.ConnectedKeyFrame.id)
  return _internal_id();
}
inline void ConnectedKeyFrame::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void ConnectedKeyFrame::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.ConnectedKeyFrame.id)
}

// int32 weight = 2;
inline void ConnectedKeyFrame::clear_weight() {
  weight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectedKeyFrame::_internal_weight() const {
  return weight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConnectedKeyFrame::weight() const {
  // @@protoc_insertion_point(field_get:orbslam2.ConnectedKeyFrame.weight)
  return _internal_weight();
}
inline void ConnectedKeyFrame::_internal_set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weight_ = value;
}
inline void ConnectedKeyFrame::set_weight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:orbslam2.ConnectedKeyFrame.weight)
}

// -------------------------------------------------------------------

// KeyFrameData

// uint64 id = 1;
inline void KeyFrameData::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::id() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.id)
  return _internal_id();
}
inline void KeyFrameData::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void KeyFrameData::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.id)
}

// float max_u = 2;
inline void KeyFrameData::clear_max_u() {
  max_u_ = 0;
}
inline float KeyFrameData::_internal_max_u() const {
  return max_u_;
}
inline float KeyFrameData::max_u() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.max_u)
  return _internal_max_u();
}
inline void KeyFrameData::_internal_set_max_u(float value) {
  
  max_u_ = value;
}
inline void KeyFrameData::set_max_u(float value) {
  _internal_set_max_u(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.max_u)
}

// float max_v = 3;
inline void KeyFrameData::clear_max_v() {
  max_v_ = 0;
}
inline float KeyFrameData::_internal_max_v() const {
  return max_v_;
}
inline float KeyFrameData::max_v() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.max_v)
  return _internal_max_v();
}
inline void KeyFrameData::_internal_set_max_v(float value) {
  
  max_v_ = value;
}
inline void KeyFrameData::set_max_v(float value) {
  _internal_set_max_v(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.max_v)
}

// float min_u = 4;
inline void KeyFrameData::clear_min_u() {
  min_u_ = 0;
}
inline float KeyFrameData::_internal_min_u() const {
  return min_u_;
}
inline float KeyFrameData::min_u() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.min_u)
  return _internal_min_u();
}
inline void KeyFrameData::_internal_set_min_u(float value) {
  
  min_u_ = value;
}
inline void KeyFrameData::set_min_u(float value) {
  _internal_set_min_u(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.min_u)
}

// float min_v = 5;
inline void KeyFrameData::clear_min_v() {
  min_v_ = 0;
}
inline float KeyFrameData::_internal_min_v() const {
  return min_v_;
}
inline float KeyFrameData::min_v() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.min_v)
  return _internal_min_v();
}
inline void KeyFrameData::_internal_set_min_v(float value) {
  
  min_v_ = value;
}
inline void KeyFrameData::set_min_v(float value) {
  _internal_set_min_v(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.min_v)
}

// repeated .orbslam2.KeyPoint keypoints = 6;
inline int KeyFrameData::_internal_keypoints_size() const {
  return keypoints_.size();
}
inline int KeyFrameData::keypoints_size() const {
  return _internal_keypoints_size();
}
inline void KeyFrameData::clear_keypoints() {
  keypoints_.Clear();
}
inline ::orbslam2::KeyPoint* KeyFrameData::mutable_keypoints(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.keypoints)
  return keypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyPoint >*
KeyFrameData::mutable_keypoints() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.keypoints)
  return &keypoints_;
}
inline const ::orbslam2::KeyPoint& KeyFrameData::_internal_keypoints(int index) const {
  return keypoints_.Get(index);
}
inline const ::orbslam2::KeyPoint& KeyFrameData::keypoints(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.keypoints)
  return _internal_keypoints(index);
}
inline ::orbslam2::KeyPoint* KeyFrameData::_internal_add_keypoints() {
  return keypoints_.Add();
}
inline ::orbslam2::KeyPoint* KeyFrameData::add_keypoints() {
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.keypoints)
  return _internal_add_keypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyPoint >&
KeyFrameData::keypoints() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.keypoints)
  return keypoints_;
}

// repeated float right_u = 7;
inline int KeyFrameData::_internal_right_u_size() const {
  return right_u_.size();
}
inline int KeyFrameData::right_u_size() const {
  return _internal_right_u_size();
}
inline void KeyFrameData::clear_right_u() {
  right_u_.Clear();
}
inline float KeyFrameData::_internal_right_u(int index) const {
  return right_u_.Get(index);
}
inline float KeyFrameData::right_u(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.right_u)
  return _internal_right_u(index);
}
inline void KeyFrameData::set_right_u(int index, float value) {
  right_u_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.right_u)
}
inline void KeyFrameData::_internal_add_right_u(float value) {
  right_u_.Add(value);
}
inline void KeyFrameData::add_right_u(float value) {
  _internal_add_right_u(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.right_u)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameData::_internal_right_u() const {
  return right_u_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameData::right_u() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.right_u)
  return _internal_right_u();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameData::_internal_mutable_right_u() {
  return &right_u_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameData::mutable_right_u() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.right_u)
  return _internal_mutable_right_u();
}

// repeated float depths = 8;
inline int KeyFrameData::_internal_depths_size() const {
  return depths_.size();
}
inline int KeyFrameData::depths_size() const {
  return _internal_depths_size();
}
inline void KeyFrameData::clear_depths() {
  depths_.Clear();
}
inline float KeyFrameData::_internal_depths(int index) const {
  return depths_.Get(index);
}
inline float KeyFrameData::depths(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.depths)
  return _internal_depths(index);
}
inline void KeyFrameData::set_depths(int index, float value) {
  depths_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.depths)
}
inline void KeyFrameData::_internal_add_depths(float value) {
  depths_.Add(value);
}
inline void KeyFrameData::add_depths(float value) {
  _internal_add_depths(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.depths)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameData::_internal_depths() const {
  return depths_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameData::depths() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.depths)
  return _internal_depths();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameData::_internal_mutable_depths() {
  return &depths_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameData::mutable_depths() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.depths)
  return _internal_mutable_depths();
}

// repeated .orbslam2.Descriptor descriptors = 9;
inline int KeyFrameData::_internal_descriptors_size() const {
  return descriptors_.size();
}
inline int KeyFrameData::descriptors_size() const {
  return _internal_descriptors_size();
}
inline void KeyFrameData::clear_descriptors() {
  descriptors_.Clear();
}
inline ::orbslam2::Descriptor* KeyFrameData::mutable_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.descriptors)
  return descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::Descriptor >*
KeyFrameData::mutable_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.descriptors)
  return &descriptors_;
}
inline const ::orbslam2::Descriptor& KeyFrameData::_internal_descriptors(int index) const {
  return descriptors_.Get(index);
}
inline const ::orbslam2::Descriptor& KeyFrameData::descriptors(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.descriptors)
  return _internal_descriptors(index);
}
inline ::orbslam2::Descriptor* KeyFrameData::_internal_add_descriptors() {
  return descriptors_.Add();
}
inline ::orbslam2::Descriptor* KeyFrameData::add_descriptors() {
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.descriptors)
  return _internal_add_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::Descriptor >&
KeyFrameData::descriptors() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.descriptors)
  return descriptors_;
}

// .orbslam2.BowVector bow_vector = 10;
inline bool KeyFrameData::_internal_has_bow_vector() const {
  return this != internal_default_instance() && bow_vector_ != nullptr;
}
inline bool KeyFrameData::has_bow_vector() const {
  return _internal_has_bow_vector();
}
inline void KeyFrameData::clear_bow_vector() {
  if (GetArena() == nullptr && bow_vector_ != nullptr) {
    delete bow_vector_;
  }
  bow_vector_ = nullptr;
}
inline const ::orbslam2::BowVector& KeyFrameData::_internal_bow_vector() const {
  const ::orbslam2::BowVector* p = bow_vector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::BowVector*>(
      &::orbslam2::_BowVector_default_instance_);
}
inline const ::orbslam2::BowVector& KeyFrameData::bow_vector() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.bow_vector)
  return _internal_bow_vector();
}
inline void KeyFrameData::unsafe_arena_set_allocated_bow_vector(
    ::orbslam2::BowVector* bow_vector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bow_vector_);
  }
  bow_vector_ = bow_vector;
  if (bow_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.KeyFrameData.bow_vector)
}
inline ::orbslam2::BowVector* KeyFrameData::release_bow_vector() {
  auto temp = unsafe_arena_release_bow_vector();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::BowVector* KeyFrameData::unsafe_arena_release_bow_vector() {
  // @@protoc_insertion_point(field_release:orbslam2.KeyFrameData.bow_vector)
  
  ::orbslam2::BowVector* temp = bow_vector_;
  bow_vector_ = nullptr;
  return temp;
}
inline ::orbslam2::BowVector* KeyFrameData::_internal_mutable_bow_vector() {
  
  if (bow_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::BowVector>(GetArena());
    bow_vector_ = p;
  }
  return bow_vector_;
}
inline ::orbslam2::BowVector* KeyFrameData::mutable_bow_vector() {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.bow_vector)
  return _internal_mutable_bow_vector();
}
inline void KeyFrameData::set_allocated_bow_vector(::orbslam2::BowVector* bow_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bow_vector_;
  }
  if (bow_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bow_vector);
    if (message_arena != submessage_arena) {
      bow_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bow_vector, submessage_arena);
    }
    
  } else {
    
  }
  bow_vector_ = bow_vector;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.KeyFrameData.bow_vector)
}

// .orbslam2.FeatureVector feature_vector = 11;
inline bool KeyFrameData::_internal_has_feature_vector() const {
  return this != internal_default_instance() && feature_vector_ != nullptr;
}
inline bool KeyFrameData::has_feature_vector() const {
  return _internal_has_feature_vector();
}
inline void KeyFrameData::clear_feature_vector() {
  if (GetArena() == nullptr && feature_vector_ != nullptr) {
    delete feature_vector_;
  }
  feature_vector_ = nullptr;
}
inline const ::orbslam2::FeatureVector& KeyFrameData::_internal_feature_vector() const {
  const ::orbslam2::FeatureVector* p = feature_vector_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::FeatureVector*>(
      &::orbslam2::_FeatureVector_default_instance_);
}
inline const ::orbslam2::FeatureVector& KeyFrameData::feature_vector() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.feature_vector)
  return _internal_feature_vector();
}
inline void KeyFrameData::unsafe_arena_set_allocated_feature_vector(
    ::orbslam2::FeatureVector* feature_vector) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature_vector_);
  }
  feature_vector_ = feature_vector;
  if (feature_vector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.KeyFrameData.feature_vector)
}
inline ::orbslam2::FeatureVector* KeyFrameData::release_feature_vector() {
  auto temp = unsafe_arena_release_feature_vector();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::FeatureVector* KeyFrameData::unsafe_arena_release_feature_vector() {
  // @@protoc_insertion_point(field_release:orbslam2.KeyFrameData.feature_vector)
  
  ::orbslam2::FeatureVector* temp = feature_vector_;
  feature_vector_ = nullptr;
  return temp;
}
inline ::orbslam2::FeatureVector* KeyFrameData::_internal_mutable_feature_vector() {
  
  if (feature_vector_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::FeatureVector>(GetArena());
    feature_vector_ = p;
  }
  return feature_vector_;
}
inline ::orbslam2::FeatureVector* KeyFrameData::mutable_feature_vector() {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.feature_vector)
  return _internal_mutable_feature_vector();
}
inline void KeyFrameData::set_allocated_feature_vector(::orbslam2::FeatureVector* feature_vector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feature_vector_;
  }
  if (feature_vector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feature_vector);
    if (message_arena != submessage_arena) {
      feature_vector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature_vector, submessage_arena);
    }
    
  } else {
    
  }
  feature_vector_ = feature_vector;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.KeyFrameData.feature_vector)
}

// .orbslam2.Pose pose = 12;
inline bool KeyFrameData::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool KeyFrameData::has_pose() const {
  return _internal_has_pose();
}
inline void KeyFrameData::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::orbslam2::Pose& KeyFrameData::_internal_pose() const {
  const ::orbslam2::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::Pose*>(
      &::orbslam2::_Pose_default_instance_);
}
inline const ::orbslam2::Pose& KeyFrameData::pose() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.pose)
  return _internal_pose();
}
inline void KeyFrameData::unsafe_arena_set_allocated_pose(
    ::orbslam2::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.KeyFrameData.pose)
}
inline ::orbslam2::Pose* KeyFrameData::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::Pose* KeyFrameData::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:orbslam2.KeyFrameData.pose)
  
  ::orbslam2::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::orbslam2::Pose* KeyFrameData::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::orbslam2::Pose* KeyFrameData::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.pose)
  return _internal_mutable_pose();
}
inline void KeyFrameData::set_allocated_pose(::orbslam2::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.KeyFrameData.pose)
}

// repeated .orbslam2.ConnectedKeyFrame connected_kfs = 13;
inline int KeyFrameData::_internal_connected_kfs_size() const {
  return connected_kfs_.size();
}
inline int KeyFrameData::connected_kfs_size() const {
  return _internal_connected_kfs_size();
}
inline void KeyFrameData::clear_connected_kfs() {
  connected_kfs_.Clear();
}
inline ::orbslam2::ConnectedKeyFrame* KeyFrameData::mutable_connected_kfs(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameData.connected_kfs)
  return connected_kfs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::ConnectedKeyFrame >*
KeyFrameData::mutable_connected_kfs() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.connected_kfs)
  return &connected_kfs_;
}
inline const ::orbslam2::ConnectedKeyFrame& KeyFrameData::_internal_connected_kfs(int index) const {
  return connected_kfs_.Get(index);
}
inline const ::orbslam2::ConnectedKeyFrame& KeyFrameData::connected_kfs(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.connected_kfs)
  return _internal_connected_kfs(index);
}
inline ::orbslam2::ConnectedKeyFrame* KeyFrameData::_internal_add_connected_kfs() {
  return connected_kfs_.Add();
}
inline ::orbslam2::ConnectedKeyFrame* KeyFrameData::add_connected_kfs() {
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.connected_kfs)
  return _internal_add_connected_kfs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::ConnectedKeyFrame >&
KeyFrameData::connected_kfs() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.connected_kfs)
  return connected_kfs_;
}

// repeated uint64 children_ids = 14;
inline int KeyFrameData::_internal_children_ids_size() const {
  return children_ids_.size();
}
inline int KeyFrameData::children_ids_size() const {
  return _internal_children_ids_size();
}
inline void KeyFrameData::clear_children_ids() {
  children_ids_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::_internal_children_ids(int index) const {
  return children_ids_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::children_ids(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.children_ids)
  return _internal_children_ids(index);
}
inline void KeyFrameData::set_children_ids(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  children_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.children_ids)
}
inline void KeyFrameData::_internal_add_children_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  children_ids_.Add(value);
}
inline void KeyFrameData::add_children_ids(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_children_ids(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.children_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyFrameData::_internal_children_ids() const {
  return children_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyFrameData::children_ids() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.children_ids)
  return _internal_children_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyFrameData::_internal_mutable_children_ids() {
  return &children_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyFrameData::mutable_children_ids() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.children_ids)
  return _internal_mutable_children_ids();
}

// repeated uint64 loop_edges = 15;
inline int KeyFrameData::_internal_loop_edges_size() const {
  return loop_edges_.size();
}
inline int KeyFrameData::loop_edges_size() const {
  return _internal_loop_edges_size();
}
inline void KeyFrameData::clear_loop_edges() {
  loop_edges_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::_internal_loop_edges(int index) const {
  return loop_edges_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameData::loop_edges(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.loop_edges)
  return _internal_loop_edges(index);
}
inline void KeyFrameData::set_loop_edges(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  loop_edges_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.loop_edges)
}
inline void KeyFrameData::_internal_add_loop_edges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  loop_edges_.Add(value);
}
inline void KeyFrameData::add_loop_edges(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_loop_edges(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.loop_edges)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyFrameData::_internal_loop_edges() const {
  return loop_edges_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
KeyFrameData::loop_edges() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.loop_edges)
  return _internal_loop_edges();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyFrameData::_internal_mutable_loop_edges() {
  return &loop_edges_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
KeyFrameData::mutable_loop_edges() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.loop_edges)
  return _internal_mutable_loop_edges();
}

// repeated int64 map_points = 16;
inline int KeyFrameData::_internal_map_points_size() const {
  return map_points_.size();
}
inline int KeyFrameData::map_points_size() const {
  return _internal_map_points_size();
}
inline void KeyFrameData::clear_map_points() {
  map_points_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyFrameData::_internal_map_points(int index) const {
  return map_points_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 KeyFrameData::map_points(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameData.map_points)
  return _internal_map_points(index);
}
inline void KeyFrameData::set_map_points(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  map_points_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameData.map_points)
}
inline void KeyFrameData::_internal_add_map_points(::PROTOBUF_NAMESPACE_ID::int64 value) {
  map_points_.Add(value);
}
inline void KeyFrameData::add_map_points(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_map_points(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameData.map_points)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
KeyFrameData::_internal_map_points() const {
  return map_points_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
KeyFrameData::map_points() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameData.map_points)
  return _internal_map_points();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
KeyFrameData::_internal_mutable_map_points() {
  return &map_points_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
KeyFrameData::mutable_map_points() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameData.map_points)
  return _internal_mutable_map_points();
}

// -------------------------------------------------------------------

// KeyFrameList

// uint64 next_id = 1;
inline void KeyFrameList::clear_next_id() {
  next_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameList::_internal_next_id() const {
  return next_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 KeyFrameList::next_id() const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameList.next_id)
  return _internal_next_id();
}
inline void KeyFrameList::_internal_set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  next_id_ = value;
}
inline void KeyFrameList::set_next_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_next_id(value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameList.next_id)
}

// repeated float scale_factors = 2;
inline int KeyFrameList::_internal_scale_factors_size() const {
  return scale_factors_.size();
}
inline int KeyFrameList::scale_factors_size() const {
  return _internal_scale_factors_size();
}
inline void KeyFrameList::clear_scale_factors() {
  scale_factors_.Clear();
}
inline float KeyFrameList::_internal_scale_factors(int index) const {
  return scale_factors_.Get(index);
}
inline float KeyFrameList::scale_factors(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameList.scale_factors)
  return _internal_scale_factors(index);
}
inline void KeyFrameList::set_scale_factors(int index, float value) {
  scale_factors_.Set(index, value);
  // @@protoc_insertion_point(field_set:orbslam2.KeyFrameList.scale_factors)
}
inline void KeyFrameList::_internal_add_scale_factors(float value) {
  scale_factors_.Add(value);
}
inline void KeyFrameList::add_scale_factors(float value) {
  _internal_add_scale_factors(value);
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameList.scale_factors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameList::_internal_scale_factors() const {
  return scale_factors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
KeyFrameList::scale_factors() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameList.scale_factors)
  return _internal_scale_factors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameList::_internal_mutable_scale_factors() {
  return &scale_factors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
KeyFrameList::mutable_scale_factors() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameList.scale_factors)
  return _internal_mutable_scale_factors();
}

// repeated .orbslam2.KeyFrameData keyframes = 3;
inline int KeyFrameList::_internal_keyframes_size() const {
  return keyframes_.size();
}
inline int KeyFrameList::keyframes_size() const {
  return _internal_keyframes_size();
}
inline void KeyFrameList::clear_keyframes() {
  keyframes_.Clear();
}
inline ::orbslam2::KeyFrameData* KeyFrameList::mutable_keyframes(int index) {
  // @@protoc_insertion_point(field_mutable:orbslam2.KeyFrameList.keyframes)
  return keyframes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyFrameData >*
KeyFrameList::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable_list:orbslam2.KeyFrameList.keyframes)
  return &keyframes_;
}
inline const ::orbslam2::KeyFrameData& KeyFrameList::_internal_keyframes(int index) const {
  return keyframes_.Get(index);
}
inline const ::orbslam2::KeyFrameData& KeyFrameList::keyframes(int index) const {
  // @@protoc_insertion_point(field_get:orbslam2.KeyFrameList.keyframes)
  return _internal_keyframes(index);
}
inline ::orbslam2::KeyFrameData* KeyFrameList::_internal_add_keyframes() {
  return keyframes_.Add();
}
inline ::orbslam2::KeyFrameData* KeyFrameList::add_keyframes() {
  // @@protoc_insertion_point(field_add:orbslam2.KeyFrameList.keyframes)
  return _internal_add_keyframes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orbslam2::KeyFrameData >&
KeyFrameList::keyframes() const {
  // @@protoc_insertion_point(field_list:orbslam2.KeyFrameList.keyframes)
  return keyframes_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orbslam2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Keyframe_2eproto
