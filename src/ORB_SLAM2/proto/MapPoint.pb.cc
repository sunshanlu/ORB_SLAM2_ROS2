// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapPoint.proto

#include "MapPoint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Descriptor_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MapPoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapPointData_MapPoint_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MapPoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MapPoint_2eproto;
namespace orbslam2 {
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class MapPointDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPointData> _instance;
} _MapPointData_default_instance_;
class MapPointListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapPointList> _instance;
} _MapPointList_default_instance_;
}  // namespace orbslam2
static void InitDefaultsscc_info_MapPointData_MapPoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_MapPointData_default_instance_;
    new (ptr) ::orbslam2::MapPointData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::MapPointData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapPointData_MapPoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapPointData_MapPoint_2eproto}, {
      &scc_info_Vector3_MapPoint_2eproto.base,
      &scc_info_Descriptor_Keyframe_2eproto.base,}};

static void InitDefaultsscc_info_MapPointList_MapPoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_MapPointList_default_instance_;
    new (ptr) ::orbslam2::MapPointList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::MapPointList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapPointList_MapPoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MapPointList_MapPoint_2eproto}, {
      &scc_info_MapPointData_MapPoint_2eproto.base,}};

static void InitDefaultsscc_info_Vector3_MapPoint_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_Vector3_default_instance_;
    new (ptr) ::orbslam2::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_MapPoint_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_MapPoint_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_MapPoint_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_MapPoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_MapPoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_MapPoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, max_distance_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, min_distance_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, ref_kf_id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, ref_feat_id_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, matches_in_track_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, inliers_in_track_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, position_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, view_direction_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointData, desc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapPointList, mappoints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::orbslam2::Vector3)},
  { 8, -1, sizeof(::orbslam2::MapPointData)},
  { 23, -1, sizeof(::orbslam2::MapPointList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_MapPointData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_MapPointList_default_instance_),
};

const char descriptor_table_protodef_MapPoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016MapPoint.proto\022\010orbslam2\032\016Keyframe.pro"
  "to\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z"
  "\030\003 \001(\002\"\226\002\n\014MapPointData\022\n\n\002id\030\001 \001(\004\022\024\n\014m"
  "ax_distance\030\002 \001(\002\022\024\n\014min_distance\030\003 \001(\002\022"
  "\021\n\tref_kf_id\030\004 \001(\004\022\023\n\013ref_feat_id\030\005 \001(\004\022"
  "\030\n\020matches_in_track\030\006 \001(\005\022\030\n\020inliers_in_"
  "track\030\007 \001(\005\022#\n\010position\030\010 \001(\0132\021.orbslam2"
  ".Vector3\022)\n\016view_direction\030\t \001(\0132\021.orbsl"
  "am2.Vector3\022\"\n\004desc\030\n \001(\0132\024.orbslam2.Des"
  "criptor\"9\n\014MapPointList\022)\n\tmappoints\030\001 \003"
  "(\0132\026.orbslam2.MapPointDatab\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_MapPoint_2eproto_deps[1] = {
  &::descriptor_table_Keyframe_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_MapPoint_2eproto_sccs[3] = {
  &scc_info_MapPointData_MapPoint_2eproto.base,
  &scc_info_MapPointList_MapPoint_2eproto.base,
  &scc_info_Vector3_MapPoint_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_MapPoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_MapPoint_2eproto = {
  false, false, descriptor_table_protodef_MapPoint_2eproto, "MapPoint.proto", 434,
  &descriptor_table_MapPoint_2eproto_once, descriptor_table_MapPoint_2eproto_sccs, descriptor_table_MapPoint_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_MapPoint_2eproto::offsets,
  file_level_metadata_MapPoint_2eproto, 3, file_level_enum_descriptors_MapPoint_2eproto, file_level_service_descriptors_MapPoint_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_MapPoint_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_MapPoint_2eproto)), true);
namespace orbslam2 {

// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:orbslam2.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:orbslam2.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_MapPoint_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapPointData::InitAsDefaultInstance() {
  ::orbslam2::_MapPointData_default_instance_._instance.get_mutable()->position_ = const_cast< ::orbslam2::Vector3*>(
      ::orbslam2::Vector3::internal_default_instance());
  ::orbslam2::_MapPointData_default_instance_._instance.get_mutable()->view_direction_ = const_cast< ::orbslam2::Vector3*>(
      ::orbslam2::Vector3::internal_default_instance());
  ::orbslam2::_MapPointData_default_instance_._instance.get_mutable()->desc_ = const_cast< ::orbslam2::Descriptor*>(
      ::orbslam2::Descriptor::internal_default_instance());
}
class MapPointData::_Internal {
 public:
  static const ::orbslam2::Vector3& position(const MapPointData* msg);
  static const ::orbslam2::Vector3& view_direction(const MapPointData* msg);
  static const ::orbslam2::Descriptor& desc(const MapPointData* msg);
};

const ::orbslam2::Vector3&
MapPointData::_Internal::position(const MapPointData* msg) {
  return *msg->position_;
}
const ::orbslam2::Vector3&
MapPointData::_Internal::view_direction(const MapPointData* msg) {
  return *msg->view_direction_;
}
const ::orbslam2::Descriptor&
MapPointData::_Internal::desc(const MapPointData* msg) {
  return *msg->desc_;
}
void MapPointData::clear_desc() {
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
}
MapPointData::MapPointData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.MapPointData)
}
MapPointData::MapPointData(const MapPointData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::orbslam2::Vector3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_view_direction()) {
    view_direction_ = new ::orbslam2::Vector3(*from.view_direction_);
  } else {
    view_direction_ = nullptr;
  }
  if (from._internal_has_desc()) {
    desc_ = new ::orbslam2::Descriptor(*from.desc_);
  } else {
    desc_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&inliers_in_track_) -
    reinterpret_cast<char*>(&id_)) + sizeof(inliers_in_track_));
  // @@protoc_insertion_point(copy_constructor:orbslam2.MapPointData)
}

void MapPointData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapPointData_MapPoint_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inliers_in_track_) -
      reinterpret_cast<char*>(&position_)) + sizeof(inliers_in_track_));
}

MapPointData::~MapPointData() {
  // @@protoc_insertion_point(destructor:orbslam2.MapPointData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapPointData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete view_direction_;
  if (this != internal_default_instance()) delete desc_;
}

void MapPointData::ArenaDtor(void* object) {
  MapPointData* _this = reinterpret_cast< MapPointData* >(object);
  (void)_this;
}
void MapPointData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapPointData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPointData& MapPointData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPointData_MapPoint_2eproto.base);
  return *internal_default_instance();
}


void MapPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.MapPointData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && view_direction_ != nullptr) {
    delete view_direction_;
  }
  view_direction_ = nullptr;
  if (GetArena() == nullptr && desc_ != nullptr) {
    delete desc_;
  }
  desc_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inliers_in_track_) -
      reinterpret_cast<char*>(&id_)) + sizeof(inliers_in_track_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPointData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float max_distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min_distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          min_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint64 ref_kf_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ref_kf_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 ref_feat_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ref_feat_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 matches_in_track = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          matches_in_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 inliers_in_track = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          inliers_in_track_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.Vector3 position = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.Vector3 view_direction = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_view_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.Descriptor desc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_desc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPointData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.MapPointData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // float max_distance = 2;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_distance(), target);
  }

  // float min_distance = 3;
  if (!(this->min_distance() <= 0 && this->min_distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_min_distance(), target);
  }

  // uint64 ref_kf_id = 4;
  if (this->ref_kf_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_ref_kf_id(), target);
  }

  // uint64 ref_feat_id = 5;
  if (this->ref_feat_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_ref_feat_id(), target);
  }

  // int32 matches_in_track = 6;
  if (this->matches_in_track() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_matches_in_track(), target);
  }

  // int32 inliers_in_track = 7;
  if (this->inliers_in_track() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_inliers_in_track(), target);
  }

  // .orbslam2.Vector3 position = 8;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::position(this), target, stream);
  }

  // .orbslam2.Vector3 view_direction = 9;
  if (this->has_view_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::view_direction(this), target, stream);
  }

  // .orbslam2.Descriptor desc = 10;
  if (this->has_desc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::desc(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.MapPointData)
  return target;
}

size_t MapPointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.MapPointData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .orbslam2.Vector3 position = 8;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .orbslam2.Vector3 view_direction = 9;
  if (this->has_view_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *view_direction_);
  }

  // .orbslam2.Descriptor desc = 10;
  if (this->has_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *desc_);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // float max_distance = 2;
  if (!(this->max_distance() <= 0 && this->max_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // float min_distance = 3;
  if (!(this->min_distance() <= 0 && this->min_distance() >= 0)) {
    total_size += 1 + 4;
  }

  // uint64 ref_kf_id = 4;
  if (this->ref_kf_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ref_kf_id());
  }

  // uint64 ref_feat_id = 5;
  if (this->ref_feat_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_ref_feat_id());
  }

  // int32 matches_in_track = 6;
  if (this->matches_in_track() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_matches_in_track());
  }

  // int32 inliers_in_track = 7;
  if (this->inliers_in_track() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_inliers_in_track());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPointData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.MapPointData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPointData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPointData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.MapPointData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.MapPointData)
    MergeFrom(*source);
  }
}

void MapPointData::MergeFrom(const MapPointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.MapPointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::orbslam2::Vector3::MergeFrom(from._internal_position());
  }
  if (from.has_view_direction()) {
    _internal_mutable_view_direction()->::orbslam2::Vector3::MergeFrom(from._internal_view_direction());
  }
  if (from.has_desc()) {
    _internal_mutable_desc()->::orbslam2::Descriptor::MergeFrom(from._internal_desc());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.max_distance() <= 0 && from.max_distance() >= 0)) {
    _internal_set_max_distance(from._internal_max_distance());
  }
  if (!(from.min_distance() <= 0 && from.min_distance() >= 0)) {
    _internal_set_min_distance(from._internal_min_distance());
  }
  if (from.ref_kf_id() != 0) {
    _internal_set_ref_kf_id(from._internal_ref_kf_id());
  }
  if (from.ref_feat_id() != 0) {
    _internal_set_ref_feat_id(from._internal_ref_feat_id());
  }
  if (from.matches_in_track() != 0) {
    _internal_set_matches_in_track(from._internal_matches_in_track());
  }
  if (from.inliers_in_track() != 0) {
    _internal_set_inliers_in_track(from._internal_inliers_in_track());
  }
}

void MapPointData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.MapPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPointData::CopyFrom(const MapPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.MapPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPointData::IsInitialized() const {
  return true;
}

void MapPointData::InternalSwap(MapPointData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapPointData, inliers_in_track_)
      + sizeof(MapPointData::inliers_in_track_)
      - PROTOBUF_FIELD_OFFSET(MapPointData, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPointData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapPointList::InitAsDefaultInstance() {
}
class MapPointList::_Internal {
 public:
};

MapPointList::MapPointList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mappoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.MapPointList)
}
MapPointList::MapPointList(const MapPointList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mappoints_(from.mappoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:orbslam2.MapPointList)
}

void MapPointList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapPointList_MapPoint_2eproto.base);
}

MapPointList::~MapPointList() {
  // @@protoc_insertion_point(destructor:orbslam2.MapPointList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapPointList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MapPointList::ArenaDtor(void* object) {
  MapPointList* _this = reinterpret_cast< MapPointList* >(object);
  (void)_this;
}
void MapPointList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapPointList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapPointList& MapPointList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapPointList_MapPoint_2eproto.base);
  return *internal_default_instance();
}


void MapPointList::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.MapPointList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mappoints_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapPointList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .orbslam2.MapPointData mappoints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mappoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapPointList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.MapPointList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .orbslam2.MapPointData mappoints = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mappoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mappoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.MapPointList)
  return target;
}

size_t MapPointList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.MapPointList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .orbslam2.MapPointData mappoints = 1;
  total_size += 1UL * this->_internal_mappoints_size();
  for (const auto& msg : this->mappoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapPointList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.MapPointList)
  GOOGLE_DCHECK_NE(&from, this);
  const MapPointList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapPointList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.MapPointList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.MapPointList)
    MergeFrom(*source);
  }
}

void MapPointList::MergeFrom(const MapPointList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.MapPointList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mappoints_.MergeFrom(from.mappoints_);
}

void MapPointList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.MapPointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapPointList::CopyFrom(const MapPointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.MapPointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapPointList::IsInitialized() const {
  return true;
}

void MapPointList::InternalSwap(MapPointList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  mappoints_.InternalSwap(&other->mappoints_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapPointList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orbslam2::Vector3* Arena::CreateMaybeMessage< ::orbslam2::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::MapPointData* Arena::CreateMaybeMessage< ::orbslam2::MapPointData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::MapPointData >(arena);
}
template<> PROTOBUF_NOINLINE ::orbslam2::MapPointList* Arena::CreateMaybeMessage< ::orbslam2::MapPointList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::MapPointList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
