// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Map_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MapPoint.pb.h"
#include "Keyframe.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Map_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Map_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Map_2eproto;
namespace orbslam2 {
class MapData;
class MapDataDefaultTypeInternal;
extern MapDataDefaultTypeInternal _MapData_default_instance_;
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> ::orbslam2::MapData* Arena::CreateMaybeMessage<::orbslam2::MapData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orbslam2 {

// ===================================================================

class MapData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orbslam2.MapData) */ {
 public:
  inline MapData() : MapData(nullptr) {};
  virtual ~MapData();

  MapData(const MapData& from);
  MapData(MapData&& from) noexcept
    : MapData() {
    *this = ::std::move(from);
  }

  inline MapData& operator=(const MapData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapData& operator=(MapData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapData* internal_default_instance() {
    return reinterpret_cast<const MapData*>(
               &_MapData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapData& a, MapData& b) {
    a.Swap(&b);
  }
  inline void Swap(MapData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapData* New() const final {
    return CreateMaybeMessage<MapData>(nullptr);
  }

  MapData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapData& from);
  void MergeFrom(const MapData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orbslam2.MapData";
  }
  protected:
  explicit MapData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Map_2eproto);
    return ::descriptor_table_Map_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyframesFieldNumber = 1,
    kMappointsFieldNumber = 2,
  };
  // .orbslam2.KeyFrameList keyframes = 1;
  bool has_keyframes() const;
  private:
  bool _internal_has_keyframes() const;
  public:
  void clear_keyframes();
  const ::orbslam2::KeyFrameList& keyframes() const;
  ::orbslam2::KeyFrameList* release_keyframes();
  ::orbslam2::KeyFrameList* mutable_keyframes();
  void set_allocated_keyframes(::orbslam2::KeyFrameList* keyframes);
  private:
  const ::orbslam2::KeyFrameList& _internal_keyframes() const;
  ::orbslam2::KeyFrameList* _internal_mutable_keyframes();
  public:
  void unsafe_arena_set_allocated_keyframes(
      ::orbslam2::KeyFrameList* keyframes);
  ::orbslam2::KeyFrameList* unsafe_arena_release_keyframes();

  // .orbslam2.MapPointList mappoints = 2;
  bool has_mappoints() const;
  private:
  bool _internal_has_mappoints() const;
  public:
  void clear_mappoints();
  const ::orbslam2::MapPointList& mappoints() const;
  ::orbslam2::MapPointList* release_mappoints();
  ::orbslam2::MapPointList* mutable_mappoints();
  void set_allocated_mappoints(::orbslam2::MapPointList* mappoints);
  private:
  const ::orbslam2::MapPointList& _internal_mappoints() const;
  ::orbslam2::MapPointList* _internal_mutable_mappoints();
  public:
  void unsafe_arena_set_allocated_mappoints(
      ::orbslam2::MapPointList* mappoints);
  ::orbslam2::MapPointList* unsafe_arena_release_mappoints();

  // @@protoc_insertion_point(class_scope:orbslam2.MapData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::orbslam2::KeyFrameList* keyframes_;
  ::orbslam2::MapPointList* mappoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Map_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapData

// .orbslam2.KeyFrameList keyframes = 1;
inline bool MapData::_internal_has_keyframes() const {
  return this != internal_default_instance() && keyframes_ != nullptr;
}
inline bool MapData::has_keyframes() const {
  return _internal_has_keyframes();
}
inline const ::orbslam2::KeyFrameList& MapData::_internal_keyframes() const {
  const ::orbslam2::KeyFrameList* p = keyframes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::KeyFrameList*>(
      &::orbslam2::_KeyFrameList_default_instance_);
}
inline const ::orbslam2::KeyFrameList& MapData::keyframes() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapData.keyframes)
  return _internal_keyframes();
}
inline void MapData::unsafe_arena_set_allocated_keyframes(
    ::orbslam2::KeyFrameList* keyframes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyframes_);
  }
  keyframes_ = keyframes;
  if (keyframes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.MapData.keyframes)
}
inline ::orbslam2::KeyFrameList* MapData::release_keyframes() {
  auto temp = unsafe_arena_release_keyframes();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::KeyFrameList* MapData::unsafe_arena_release_keyframes() {
  // @@protoc_insertion_point(field_release:orbslam2.MapData.keyframes)
  
  ::orbslam2::KeyFrameList* temp = keyframes_;
  keyframes_ = nullptr;
  return temp;
}
inline ::orbslam2::KeyFrameList* MapData::_internal_mutable_keyframes() {
  
  if (keyframes_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::KeyFrameList>(GetArena());
    keyframes_ = p;
  }
  return keyframes_;
}
inline ::orbslam2::KeyFrameList* MapData::mutable_keyframes() {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapData.keyframes)
  return _internal_mutable_keyframes();
}
inline void MapData::set_allocated_keyframes(::orbslam2::KeyFrameList* keyframes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyframes_);
  }
  if (keyframes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyframes)->GetArena();
    if (message_arena != submessage_arena) {
      keyframes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyframes, submessage_arena);
    }
    
  } else {
    
  }
  keyframes_ = keyframes;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.MapData.keyframes)
}

// .orbslam2.MapPointList mappoints = 2;
inline bool MapData::_internal_has_mappoints() const {
  return this != internal_default_instance() && mappoints_ != nullptr;
}
inline bool MapData::has_mappoints() const {
  return _internal_has_mappoints();
}
inline const ::orbslam2::MapPointList& MapData::_internal_mappoints() const {
  const ::orbslam2::MapPointList* p = mappoints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::orbslam2::MapPointList*>(
      &::orbslam2::_MapPointList_default_instance_);
}
inline const ::orbslam2::MapPointList& MapData::mappoints() const {
  // @@protoc_insertion_point(field_get:orbslam2.MapData.mappoints)
  return _internal_mappoints();
}
inline void MapData::unsafe_arena_set_allocated_mappoints(
    ::orbslam2::MapPointList* mappoints) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mappoints_);
  }
  mappoints_ = mappoints;
  if (mappoints) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:orbslam2.MapData.mappoints)
}
inline ::orbslam2::MapPointList* MapData::release_mappoints() {
  auto temp = unsafe_arena_release_mappoints();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::orbslam2::MapPointList* MapData::unsafe_arena_release_mappoints() {
  // @@protoc_insertion_point(field_release:orbslam2.MapData.mappoints)
  
  ::orbslam2::MapPointList* temp = mappoints_;
  mappoints_ = nullptr;
  return temp;
}
inline ::orbslam2::MapPointList* MapData::_internal_mutable_mappoints() {
  
  if (mappoints_ == nullptr) {
    auto* p = CreateMaybeMessage<::orbslam2::MapPointList>(GetArena());
    mappoints_ = p;
  }
  return mappoints_;
}
inline ::orbslam2::MapPointList* MapData::mutable_mappoints() {
  // @@protoc_insertion_point(field_mutable:orbslam2.MapData.mappoints)
  return _internal_mutable_mappoints();
}
inline void MapData::set_allocated_mappoints(::orbslam2::MapPointList* mappoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mappoints_);
  }
  if (mappoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mappoints)->GetArena();
    if (message_arena != submessage_arena) {
      mappoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mappoints, submessage_arena);
    }
    
  } else {
    
  }
  mappoints_ = mappoints;
  // @@protoc_insertion_point(field_set_allocated:orbslam2.MapData.mappoints)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace orbslam2

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Map_2eproto
