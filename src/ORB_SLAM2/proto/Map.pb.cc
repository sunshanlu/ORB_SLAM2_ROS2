// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#include "Map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_Keyframe_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_KeyFrameList_Keyframe_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_MapPoint_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MapPointList_MapPoint_2eproto;
namespace orbslam2 {
class MapDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapData> _instance;
} _MapData_default_instance_;
}  // namespace orbslam2
static void InitDefaultsscc_info_MapData_Map_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::orbslam2::_MapData_default_instance_;
    new (ptr) ::orbslam2::MapData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::orbslam2::MapData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapData_Map_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapData_Map_2eproto}, {
      &scc_info_KeyFrameList_Keyframe_2eproto.base,
      &scc_info_MapPointList_MapPoint_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Map_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Map_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Map_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Map_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapData, keyframes_),
  PROTOBUF_FIELD_OFFSET(::orbslam2::MapData, mappoints_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::orbslam2::MapData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::orbslam2::_MapData_default_instance_),
};

const char descriptor_table_protodef_Map_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tMap.proto\022\010orbslam2\032\016MapPoint.proto\032\016K"
  "eyframe.proto\"_\n\007MapData\022)\n\tkeyframes\030\001 "
  "\001(\0132\026.orbslam2.KeyFrameList\022)\n\tmappoints"
  "\030\002 \001(\0132\026.orbslam2.MapPointListb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Map_2eproto_deps[2] = {
  &::descriptor_table_Keyframe_2eproto,
  &::descriptor_table_MapPoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Map_2eproto_sccs[1] = {
  &scc_info_MapData_Map_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Map_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Map_2eproto = {
  false, false, descriptor_table_protodef_Map_2eproto, "Map.proto", 158,
  &descriptor_table_Map_2eproto_once, descriptor_table_Map_2eproto_sccs, descriptor_table_Map_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_Map_2eproto::offsets,
  file_level_metadata_Map_2eproto, 1, file_level_enum_descriptors_Map_2eproto, file_level_service_descriptors_Map_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Map_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Map_2eproto)), true);
namespace orbslam2 {

// ===================================================================

void MapData::InitAsDefaultInstance() {
  ::orbslam2::_MapData_default_instance_._instance.get_mutable()->keyframes_ = const_cast< ::orbslam2::KeyFrameList*>(
      ::orbslam2::KeyFrameList::internal_default_instance());
  ::orbslam2::_MapData_default_instance_._instance.get_mutable()->mappoints_ = const_cast< ::orbslam2::MapPointList*>(
      ::orbslam2::MapPointList::internal_default_instance());
}
class MapData::_Internal {
 public:
  static const ::orbslam2::KeyFrameList& keyframes(const MapData* msg);
  static const ::orbslam2::MapPointList& mappoints(const MapData* msg);
};

const ::orbslam2::KeyFrameList&
MapData::_Internal::keyframes(const MapData* msg) {
  return *msg->keyframes_;
}
const ::orbslam2::MapPointList&
MapData::_Internal::mappoints(const MapData* msg) {
  return *msg->mappoints_;
}
void MapData::clear_keyframes() {
  if (GetArena() == nullptr && keyframes_ != nullptr) {
    delete keyframes_;
  }
  keyframes_ = nullptr;
}
void MapData::clear_mappoints() {
  if (GetArena() == nullptr && mappoints_ != nullptr) {
    delete mappoints_;
  }
  mappoints_ = nullptr;
}
MapData::MapData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:orbslam2.MapData)
}
MapData::MapData(const MapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_keyframes()) {
    keyframes_ = new ::orbslam2::KeyFrameList(*from.keyframes_);
  } else {
    keyframes_ = nullptr;
  }
  if (from._internal_has_mappoints()) {
    mappoints_ = new ::orbslam2::MapPointList(*from.mappoints_);
  } else {
    mappoints_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:orbslam2.MapData)
}

void MapData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapData_Map_2eproto.base);
  ::memset(&keyframes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mappoints_) -
      reinterpret_cast<char*>(&keyframes_)) + sizeof(mappoints_));
}

MapData::~MapData() {
  // @@protoc_insertion_point(destructor:orbslam2.MapData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete keyframes_;
  if (this != internal_default_instance()) delete mappoints_;
}

void MapData::ArenaDtor(void* object) {
  MapData* _this = reinterpret_cast< MapData* >(object);
  (void)_this;
}
void MapData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapData& MapData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapData_Map_2eproto.base);
  return *internal_default_instance();
}


void MapData::Clear() {
// @@protoc_insertion_point(message_clear_start:orbslam2.MapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && keyframes_ != nullptr) {
    delete keyframes_;
  }
  keyframes_ = nullptr;
  if (GetArena() == nullptr && mappoints_ != nullptr) {
    delete mappoints_;
  }
  mappoints_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .orbslam2.KeyFrameList keyframes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_keyframes(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .orbslam2.MapPointList mappoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mappoints(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:orbslam2.MapData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .orbslam2.KeyFrameList keyframes = 1;
  if (this->has_keyframes()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::keyframes(this), target, stream);
  }

  // .orbslam2.MapPointList mappoints = 2;
  if (this->has_mappoints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mappoints(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:orbslam2.MapData)
  return target;
}

size_t MapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:orbslam2.MapData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .orbslam2.KeyFrameList keyframes = 1;
  if (this->has_keyframes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *keyframes_);
  }

  // .orbslam2.MapPointList mappoints = 2;
  if (this->has_mappoints()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mappoints_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:orbslam2.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  const MapData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:orbslam2.MapData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:orbslam2.MapData)
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:orbslam2.MapData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_keyframes()) {
    _internal_mutable_keyframes()->::orbslam2::KeyFrameList::MergeFrom(from._internal_keyframes());
  }
  if (from.has_mappoints()) {
    _internal_mutable_mappoints()->::orbslam2::MapPointList::MergeFrom(from._internal_mappoints());
  }
}

void MapData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:orbslam2.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:orbslam2.MapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  return true;
}

void MapData::InternalSwap(MapData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapData, mappoints_)
      + sizeof(MapData::mappoints_)
      - PROTOBUF_FIELD_OFFSET(MapData, keyframes_)>(
          reinterpret_cast<char*>(&keyframes_),
          reinterpret_cast<char*>(&other->keyframes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace orbslam2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::orbslam2::MapData* Arena::CreateMaybeMessage< ::orbslam2::MapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::orbslam2::MapData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
